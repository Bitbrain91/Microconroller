
LedBar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f27  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000643  00000000  00000000  00001153  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000340  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000537  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000709  00000000  00000000  00002033  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
{
	public:
	
	static void DDR_port_to_output(volatile uint8_t* _register)
	{
		*_register = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
			(*_register) &= ~(1 << _pinNumber);
	}
	
	static void toggle_port_pin(volatile uint8_t* _register, uint8_t _pinNumber)
	{
		*_register ^= ( 1 << _pinNumber );
  70:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool flag)
	{
		if(flag)
			(*_register) |= (1 << _pinNumber);
  72:	da 9a       	sbi	0x1b, 2	; 27
		else
			(*_register) &= ~(1 << _pinNumber);
  74:	dc 98       	cbi	0x1b, 4	; 27
  76:	dd 98       	cbi	0x1b, 5	; 27
  78:	de 98       	cbi	0x1b, 6	; 27
  7a:	df 98       	cbi	0x1b, 7	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	2f ef       	ldi	r18, 0xFF	; 255
  7e:	39 e6       	ldi	r19, 0x69	; 105
  80:	98 e1       	ldi	r25, 0x18	; 24
  82:	21 50       	subi	r18, 0x01	; 1
  84:	30 40       	sbci	r19, 0x00	; 0
  86:	90 40       	sbci	r25, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x16>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x20>
  8c:	00 00       	nop
	}
	
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool flag)
	{
		if(flag)
			(*_register) |= (1 << _pinNumber);
  8e:	dc 9a       	sbi	0x1b, 4	; 27
		else
			(*_register) &= ~(1 << _pinNumber);
  90:	dd 98       	cbi	0x1b, 5	; 27
  92:	de 98       	cbi	0x1b, 6	; 27
  94:	df 98       	cbi	0x1b, 7	; 27
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	39 e6       	ldi	r19, 0x69	; 105
  9a:	98 e1       	ldi	r25, 0x18	; 24
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	30 40       	sbci	r19, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
	}
	
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool flag)
	{
		if(flag)
			(*_register) |= (1 << _pinNumber);
  a8:	dc 9a       	sbi	0x1b, 4	; 27
  aa:	dd 9a       	sbi	0x1b, 5	; 27
		else
			(*_register) &= ~(1 << _pinNumber);
  ac:	de 98       	cbi	0x1b, 6	; 27
  ae:	df 98       	cbi	0x1b, 7	; 27
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	39 e6       	ldi	r19, 0x69	; 105
  b4:	98 e1       	ldi	r25, 0x18	; 24
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x4a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x54>
  c0:	00 00       	nop
	}
	
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool flag)
	{
		if(flag)
			(*_register) |= (1 << _pinNumber);
  c2:	dc 9a       	sbi	0x1b, 4	; 27
  c4:	dd 9a       	sbi	0x1b, 5	; 27
  c6:	de 9a       	sbi	0x1b, 6	; 27
		else
			(*_register) &= ~(1 << _pinNumber);
  c8:	df 98       	cbi	0x1b, 7	; 27
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	39 e6       	ldi	r19, 0x69	; 105
  ce:	98 e1       	ldi	r25, 0x18	; 24
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	30 40       	sbci	r19, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x64>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x6e>
  da:	00 00       	nop
	}
	
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool flag)
	{
		if(flag)
			(*_register) |= (1 << _pinNumber);
  dc:	dc 9a       	sbi	0x1b, 4	; 27
  de:	dd 9a       	sbi	0x1b, 5	; 27
  e0:	de 9a       	sbi	0x1b, 6	; 27
  e2:	df 9a       	sbi	0x1b, 7	; 27
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	39 e6       	ldi	r19, 0x69	; 105
  e8:	98 e1       	ldi	r25, 0x18	; 24
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	30 40       	sbci	r19, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x7e>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x88>
  f4:	00 00       	nop
			(*_register) &= ~(1 << _pinNumber);
	}
	
	static void toggle_port_pin(volatile uint8_t* _register, uint8_t _pinNumber)
	{
		*_register ^= ( 1 << _pinNumber );
  f6:	9b b3       	in	r25, 0x1b	; 27
  f8:	98 27       	eor	r25, r24
  fa:	9b bb       	out	0x1b, r25	; 27
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	39 e6       	ldi	r19, 0x69	; 105
 100:	98 e1       	ldi	r25, 0x18	; 24
 102:	21 50       	subi	r18, 0x01	; 1
 104:	30 40       	sbci	r19, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x96>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0xa0>
 10c:	00 00       	nop
 10e:	9b b3       	in	r25, 0x1b	; 27
 110:	98 27       	eor	r25, r24
 112:	9b bb       	out	0x1b, r25	; 27
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	39 e6       	ldi	r19, 0x69	; 105
 118:	98 e1       	ldi	r25, 0x18	; 24
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	30 40       	sbci	r19, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0xae>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0xb8>
 124:	00 00       	nop
 126:	9b b3       	in	r25, 0x1b	; 27
 128:	98 27       	eor	r25, r24
 12a:	9b bb       	out	0x1b, r25	; 27
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	39 e6       	ldi	r19, 0x69	; 105
 130:	98 e1       	ldi	r25, 0x18	; 24
 132:	21 50       	subi	r18, 0x01	; 1
 134:	30 40       	sbci	r19, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0xc6>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0xd0>
 13c:	00 00       	nop
 13e:	9b b3       	in	r25, 0x1b	; 27
 140:	98 27       	eor	r25, r24
 142:	9b bb       	out	0x1b, r25	; 27
 144:	96 cf       	rjmp	.-212    	; 0x72 <main+0x6>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
