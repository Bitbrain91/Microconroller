
LedBar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000e30  00000ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800088  00800088  00000eec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d94  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007da  00000000  00000000  00003d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b37  00000000  00000000  00004532  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  0000506c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a10  00000000  00000000  000050f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000270a  00000000  00000000  00005b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000820e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 cc 03 	jmp	0x798	; 0x798 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 24 02 	call	0x448	; 0x448 <main>
  8a:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_ZN3LCD4initEv>:
		set_EN();
		
		_delay_ms(2);
	}
	
	void init()
  92:	fc 01       	movw	r30, r24
	public:

	//Bsp.: DDR_port_to_output(&DDRA)
	static void DDR_port_to_output(volatile uint8_t* _register)
	{
		*_register = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	87 bb       	out	0x17, r24	; 23
	{
		MyGPIO::DDR_port_to_output(&DDRB);
		MyGPIO::set_port_all_pins(m_port, false);	
  98:	a2 81       	ldd	r26, Z+2	; 0x02
  9a:	b3 81       	ldd	r27, Z+3	; 0x03
	static void set_port_all_pins(volatile uint8_t* _register, bool _flag)
	{
		if(_flag)
		(*_register) |= (0xFF);
		else
		(*_register) &= (0x00);
  9c:	8c 91       	ld	r24, X
  9e:	1c 92       	st	X, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f e7       	ldi	r18, 0x7F	; 127
  a2:	89 ea       	ldi	r24, 0xA9	; 169
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <_ZN3LCD4initEv+0x14>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_ZN3LCD4initEv+0x1e>
  b0:	00 00       	nop
		_delay_ms(150);
		
		MyGPIO::set_port_multiple_pins_with_clear(m_port,0x30);
  b2:	a2 81       	ldd	r26, Z+2	; 0x02
  b4:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
  b6:	8c 91       	ld	r24, X
  b8:	80 73       	andi	r24, 0x30	; 48
  ba:	8c 93       	st	X, r24
		(*_register) |= (_value);	
  bc:	8c 91       	ld	r24, X
  be:	80 63       	ori	r24, 0x30	; 48
  c0:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
  c2:	a2 81       	ldd	r26, Z+2	; 0x02
  c4:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
  c6:	8c 91       	ld	r24, X
  c8:	88 60       	ori	r24, 0x08	; 8
  ca:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	25 e8       	ldi	r18, 0x85	; 133
  ce:	2a 95       	dec	r18
  d0:	f1 f7       	brne	.-4      	; 0xce <_ZN3LCD4initEv+0x3c>
  d2:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
  d4:	a2 81       	ldd	r26, Z+2	; 0x02
  d6:	b3 81       	ldd	r27, Z+3	; 0x03
		else
			(*_register) &= ~(1 << _pinNumber);
  d8:	8c 91       	ld	r24, X
  da:	87 7f       	andi	r24, 0xF7	; 247
  dc:	8c 93       	st	X, r24
  de:	8a e1       	ldi	r24, 0x1A	; 26
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <_ZN3LCD4initEv+0x4e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <_ZN3LCD4initEv+0x54>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	8f e0       	ldi	r24, 0x0F	; 15
  e8:	97 e2       	ldi	r25, 0x27	; 39
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <_ZN3LCD4initEv+0x58>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <_ZN3LCD4initEv+0x5e>
  f0:	00 00       	nop
		
		MyGPIO::set_port_multiple_pins_with_clear(m_port,0x30);
		set_EN();
		_delay_ms(5);
		
		MyGPIO::set_port_multiple_pins_with_clear(m_port,0x30);
  f2:	a2 81       	ldd	r26, Z+2	; 0x02
  f4:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
  f6:	8c 91       	ld	r24, X
  f8:	80 73       	andi	r24, 0x30	; 48
  fa:	8c 93       	st	X, r24
		(*_register) |= (_value);	
  fc:	8c 91       	ld	r24, X
  fe:	80 63       	ori	r24, 0x30	; 48
 100:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 102:	a2 81       	ldd	r26, Z+2	; 0x02
 104:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 106:	8c 91       	ld	r24, X
 108:	88 60       	ori	r24, 0x08	; 8
 10a:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	95 e8       	ldi	r25, 0x85	; 133
 10e:	9a 95       	dec	r25
 110:	f1 f7       	brne	.-4      	; 0x10e <_ZN3LCD4initEv+0x7c>
 112:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 114:	a2 81       	ldd	r26, Z+2	; 0x02
 116:	b3 81       	ldd	r27, Z+3	; 0x03
		else
			(*_register) &= ~(1 << _pinNumber);
 118:	8c 91       	ld	r24, X
 11a:	87 7f       	andi	r24, 0xF7	; 247
 11c:	8c 93       	st	X, r24
 11e:	2a e1       	ldi	r18, 0x1A	; 26
 120:	2a 95       	dec	r18
 122:	f1 f7       	brne	.-4      	; 0x120 <_ZN3LCD4initEv+0x8e>
 124:	00 c0       	rjmp	.+0      	; 0x126 <_ZN3LCD4initEv+0x94>
 126:	8f e8       	ldi	r24, 0x8F	; 143
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <_ZN3LCD4initEv+0x98>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <_ZN3LCD4initEv+0x9e>
 130:	00 00       	nop
		
		MyGPIO::set_port_multiple_pins_with_clear(m_port,0x30);
		set_EN();		
		_delay_us(200);
		
		MyGPIO::set_port_multiple_pins_with_clear(m_port,0x30);
 132:	a2 81       	ldd	r26, Z+2	; 0x02
 134:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 136:	8c 91       	ld	r24, X
 138:	80 73       	andi	r24, 0x30	; 48
 13a:	8c 93       	st	X, r24
		(*_register) |= (_value);	
 13c:	8c 91       	ld	r24, X
 13e:	80 63       	ori	r24, 0x30	; 48
 140:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 142:	a2 81       	ldd	r26, Z+2	; 0x02
 144:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 146:	8c 91       	ld	r24, X
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	8c 93       	st	X, r24
 14c:	95 e8       	ldi	r25, 0x85	; 133
 14e:	9a 95       	dec	r25
 150:	f1 f7       	brne	.-4      	; 0x14e <_ZN3LCD4initEv+0xbc>
 152:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 154:	a2 81       	ldd	r26, Z+2	; 0x02
 156:	b3 81       	ldd	r27, Z+3	; 0x03
		else
			(*_register) &= ~(1 << _pinNumber);
 158:	8c 91       	ld	r24, X
 15a:	87 7f       	andi	r24, 0xF7	; 247
 15c:	8c 93       	st	X, r24
 15e:	2a e1       	ldi	r18, 0x1A	; 26
 160:	2a 95       	dec	r18
 162:	f1 f7       	brne	.-4      	; 0x160 <_ZN3LCD4initEv+0xce>
 164:	00 c0       	rjmp	.+0      	; 0x166 <_ZN3LCD4initEv+0xd4>
 166:	8f e8       	ldi	r24, 0x8F	; 143
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <_ZN3LCD4initEv+0xd8>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <_ZN3LCD4initEv+0xde>
 170:	00 00       	nop
		MyGPIO::set_port_multiple_pins_with_clear(m_port,0x30);
		set_EN();
		_delay_us(200);
		
		//set 4-Bit-mode
		MyGPIO::set_port_multiple_pins_with_clear(m_port,0x20);
 172:	a2 81       	ldd	r26, Z+2	; 0x02
 174:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 176:	8c 91       	ld	r24, X
 178:	80 72       	andi	r24, 0x20	; 32
 17a:	8c 93       	st	X, r24
		(*_register) |= (_value);	
 17c:	8c 91       	ld	r24, X
 17e:	80 62       	ori	r24, 0x20	; 32
 180:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 182:	a2 81       	ldd	r26, Z+2	; 0x02
 184:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 186:	8c 91       	ld	r24, X
 188:	88 60       	ori	r24, 0x08	; 8
 18a:	8c 93       	st	X, r24
 18c:	95 e8       	ldi	r25, 0x85	; 133
 18e:	9a 95       	dec	r25
 190:	f1 f7       	brne	.-4      	; 0x18e <_ZN3LCD4initEv+0xfc>
 192:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 194:	a2 81       	ldd	r26, Z+2	; 0x02
 196:	b3 81       	ldd	r27, Z+3	; 0x03
		else
			(*_register) &= ~(1 << _pinNumber);
 198:	8c 91       	ld	r24, X
 19a:	87 7f       	andi	r24, 0xF7	; 247
 19c:	8c 93       	st	X, r24
 19e:	2a e1       	ldi	r18, 0x1A	; 26
 1a0:	2a 95       	dec	r18
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <_ZN3LCD4initEv+0x10e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <_ZN3LCD4initEv+0x114>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	91 ee       	ldi	r25, 0xE1	; 225
 1aa:	24 e0       	ldi	r18, 0x04	; 4
 1ac:	81 50       	subi	r24, 0x01	; 1
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	20 40       	sbci	r18, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <_ZN3LCD4initEv+0x11a>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <_ZN3LCD4initEv+0x124>
 1b6:	00 00       	nop
	void write_8_bit_control_command(uint8_t nibble)
	{
		//send high nibble
		uint8_t command = 0x00;
		command |= (nibble & 0xF0);
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 1b8:	a2 81       	ldd	r26, Z+2	; 0x02
 1ba:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 1bc:	8c 91       	ld	r24, X
 1be:	80 72       	andi	r24, 0x20	; 32
 1c0:	8c 93       	st	X, r24
		(*_register) |= (_value);	
 1c2:	8c 91       	ld	r24, X
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 1c8:	a2 81       	ldd	r26, Z+2	; 0x02
 1ca:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 1cc:	8c 91       	ld	r24, X
 1ce:	88 60       	ori	r24, 0x08	; 8
 1d0:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	85 e8       	ldi	r24, 0x85	; 133
 1d4:	8a 95       	dec	r24
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <_ZN3LCD4initEv+0x142>
 1d8:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 1da:	a2 81       	ldd	r26, Z+2	; 0x02
 1dc:	b3 81       	ldd	r27, Z+3	; 0x03
		else
			(*_register) &= ~(1 << _pinNumber);
 1de:	8c 91       	ld	r24, X
 1e0:	87 7f       	andi	r24, 0xF7	; 247
 1e2:	8c 93       	st	X, r24
 1e4:	9a e1       	ldi	r25, 0x1A	; 26
 1e6:	9a 95       	dec	r25
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <_ZN3LCD4initEv+0x154>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <_ZN3LCD4initEv+0x15a>
		set_EN();
		
		//send low nibble
		command = 0x00;
		command |= ((nibble<<4) & (0xF0));
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 1ec:	a2 81       	ldd	r26, Z+2	; 0x02
 1ee:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 1f0:	8c 91       	ld	r24, X
 1f2:	80 78       	andi	r24, 0x80	; 128
 1f4:	8c 93       	st	X, r24
		(*_register) |= (_value);	
 1f6:	8c 91       	ld	r24, X
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 200:	8c 91       	ld	r24, X
 202:	88 60       	ori	r24, 0x08	; 8
 204:	8c 93       	st	X, r24
 206:	25 e8       	ldi	r18, 0x85	; 133
 208:	2a 95       	dec	r18
 20a:	f1 f7       	brne	.-4      	; 0x208 <_ZN3LCD4initEv+0x176>
 20c:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 20e:	a2 81       	ldd	r26, Z+2	; 0x02
 210:	b3 81       	ldd	r27, Z+3	; 0x03
		else
			(*_register) &= ~(1 << _pinNumber);
 212:	8c 91       	ld	r24, X
 214:	87 7f       	andi	r24, 0xF7	; 247
 216:	8c 93       	st	X, r24
 218:	8a e1       	ldi	r24, 0x1A	; 26
 21a:	8a 95       	dec	r24
 21c:	f1 f7       	brne	.-4      	; 0x21a <_ZN3LCD4initEv+0x188>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <_ZN3LCD4initEv+0x18e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	8f e9       	ldi	r24, 0x9F	; 159
 222:	9f e0       	ldi	r25, 0x0F	; 15
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <_ZN3LCD4initEv+0x192>
 228:	00 c0       	rjmp	.+0      	; 0x22a <_ZN3LCD4initEv+0x198>
 22a:	00 00       	nop
	void write_8_bit_control_command(uint8_t nibble)
	{
		//send high nibble
		uint8_t command = 0x00;
		command |= (nibble & 0xF0);
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 22c:	a2 81       	ldd	r26, Z+2	; 0x02
 22e:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 230:	8c 91       	ld	r24, X
 232:	1c 92       	st	X, r1
		(*_register) |= (_value);	
 234:	8c 91       	ld	r24, X
 236:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 238:	a2 81       	ldd	r26, Z+2	; 0x02
 23a:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 23c:	8c 91       	ld	r24, X
 23e:	88 60       	ori	r24, 0x08	; 8
 240:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	95 e8       	ldi	r25, 0x85	; 133
 244:	9a 95       	dec	r25
 246:	f1 f7       	brne	.-4      	; 0x244 <_ZN3LCD4initEv+0x1b2>
 248:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 24a:	a2 81       	ldd	r26, Z+2	; 0x02
 24c:	b3 81       	ldd	r27, Z+3	; 0x03
		else
			(*_register) &= ~(1 << _pinNumber);
 24e:	8c 91       	ld	r24, X
 250:	87 7f       	andi	r24, 0xF7	; 247
 252:	8c 93       	st	X, r24
 254:	2a e1       	ldi	r18, 0x1A	; 26
 256:	2a 95       	dec	r18
 258:	f1 f7       	brne	.-4      	; 0x256 <_ZN3LCD4initEv+0x1c4>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <_ZN3LCD4initEv+0x1ca>
		set_EN();
		
		//send low nibble
		command = 0x00;
		command |= ((nibble<<4) & (0xF0));
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 25c:	a2 81       	ldd	r26, Z+2	; 0x02
 25e:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 260:	8c 91       	ld	r24, X
 262:	80 78       	andi	r24, 0x80	; 128
 264:	8c 93       	st	X, r24
		(*_register) |= (_value);	
 266:	8c 91       	ld	r24, X
 268:	80 68       	ori	r24, 0x80	; 128
 26a:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 26c:	a2 81       	ldd	r26, Z+2	; 0x02
 26e:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 270:	8c 91       	ld	r24, X
 272:	88 60       	ori	r24, 0x08	; 8
 274:	8c 93       	st	X, r24
 276:	85 e8       	ldi	r24, 0x85	; 133
 278:	8a 95       	dec	r24
 27a:	f1 f7       	brne	.-4      	; 0x278 <_ZN3LCD4initEv+0x1e6>
 27c:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 27e:	a2 81       	ldd	r26, Z+2	; 0x02
 280:	b3 81       	ldd	r27, Z+3	; 0x03
		else
			(*_register) &= ~(1 << _pinNumber);
 282:	8c 91       	ld	r24, X
 284:	87 7f       	andi	r24, 0xF7	; 247
 286:	8c 93       	st	X, r24
 288:	9a e1       	ldi	r25, 0x1A	; 26
 28a:	9a 95       	dec	r25
 28c:	f1 f7       	brne	.-4      	; 0x28a <_ZN3LCD4initEv+0x1f8>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <_ZN3LCD4initEv+0x1fe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 290:	8f e9       	ldi	r24, 0x9F	; 159
 292:	9f e0       	ldi	r25, 0x0F	; 15
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <_ZN3LCD4initEv+0x202>
 298:	00 c0       	rjmp	.+0      	; 0x29a <_ZN3LCD4initEv+0x208>
 29a:	00 00       	nop
	void write_8_bit_control_command(uint8_t nibble)
	{
		//send high nibble
		uint8_t command = 0x00;
		command |= (nibble & 0xF0);
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 29c:	a2 81       	ldd	r26, Z+2	; 0x02
 29e:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 2a0:	8c 91       	ld	r24, X
 2a2:	1c 92       	st	X, r1
		(*_register) |= (_value);	
 2a4:	8c 91       	ld	r24, X
 2a6:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 2a8:	a2 81       	ldd	r26, Z+2	; 0x02
 2aa:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 2ac:	8c 91       	ld	r24, X
 2ae:	88 60       	ori	r24, 0x08	; 8
 2b0:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	95 e8       	ldi	r25, 0x85	; 133
 2b4:	9a 95       	dec	r25
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <_ZN3LCD4initEv+0x222>
 2b8:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 2ba:	a2 81       	ldd	r26, Z+2	; 0x02
 2bc:	b3 81       	ldd	r27, Z+3	; 0x03
		else
			(*_register) &= ~(1 << _pinNumber);
 2be:	8c 91       	ld	r24, X
 2c0:	87 7f       	andi	r24, 0xF7	; 247
 2c2:	8c 93       	st	X, r24
 2c4:	2a e1       	ldi	r18, 0x1A	; 26
 2c6:	2a 95       	dec	r18
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <_ZN3LCD4initEv+0x234>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <_ZN3LCD4initEv+0x23a>
		set_EN();
		
		//send low nibble
		command = 0x00;
		command |= ((nibble<<4) & (0xF0));
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 2cc:	a2 81       	ldd	r26, Z+2	; 0x02
 2ce:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 2d0:	8c 91       	ld	r24, X
 2d2:	80 71       	andi	r24, 0x10	; 16
 2d4:	8c 93       	st	X, r24
		(*_register) |= (_value);	
 2d6:	8c 91       	ld	r24, X
 2d8:	80 61       	ori	r24, 0x10	; 16
 2da:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 2dc:	a2 81       	ldd	r26, Z+2	; 0x02
 2de:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 2e0:	8c 91       	ld	r24, X
 2e2:	88 60       	ori	r24, 0x08	; 8
 2e4:	8c 93       	st	X, r24
 2e6:	85 e8       	ldi	r24, 0x85	; 133
 2e8:	8a 95       	dec	r24
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <_ZN3LCD4initEv+0x256>
 2ec:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 2ee:	a2 81       	ldd	r26, Z+2	; 0x02
 2f0:	b3 81       	ldd	r27, Z+3	; 0x03
		else
			(*_register) &= ~(1 << _pinNumber);
 2f2:	8c 91       	ld	r24, X
 2f4:	87 7f       	andi	r24, 0xF7	; 247
 2f6:	8c 93       	st	X, r24
 2f8:	9a e1       	ldi	r25, 0x1A	; 26
 2fa:	9a 95       	dec	r25
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <_ZN3LCD4initEv+0x268>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <_ZN3LCD4initEv+0x26e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 300:	8f e9       	ldi	r24, 0x9F	; 159
 302:	9f e0       	ldi	r25, 0x0F	; 15
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <_ZN3LCD4initEv+0x272>
 308:	00 c0       	rjmp	.+0      	; 0x30a <_ZN3LCD4initEv+0x278>
 30a:	00 00       	nop
 30c:	8f e6       	ldi	r24, 0x6F	; 111
 30e:	97 e1       	ldi	r25, 0x17	; 23
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <_ZN3LCD4initEv+0x27e>
 314:	00 c0       	rjmp	.+0      	; 0x316 <_ZN3LCD4initEv+0x284>
 316:	00 00       	nop
	void write_8_bit_control_command(uint8_t nibble)
	{
		//send high nibble
		uint8_t command = 0x00;
		command |= (nibble & 0xF0);
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 318:	a2 81       	ldd	r26, Z+2	; 0x02
 31a:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 31c:	8c 91       	ld	r24, X
 31e:	1c 92       	st	X, r1
		(*_register) |= (_value);	
 320:	8c 91       	ld	r24, X
 322:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 324:	a2 81       	ldd	r26, Z+2	; 0x02
 326:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 328:	8c 91       	ld	r24, X
 32a:	88 60       	ori	r24, 0x08	; 8
 32c:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32e:	95 e8       	ldi	r25, 0x85	; 133
 330:	9a 95       	dec	r25
 332:	f1 f7       	brne	.-4      	; 0x330 <_ZN3LCD4initEv+0x29e>
 334:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 336:	a2 81       	ldd	r26, Z+2	; 0x02
 338:	b3 81       	ldd	r27, Z+3	; 0x03
		else
			(*_register) &= ~(1 << _pinNumber);
 33a:	8c 91       	ld	r24, X
 33c:	87 7f       	andi	r24, 0xF7	; 247
 33e:	8c 93       	st	X, r24
 340:	2a e1       	ldi	r18, 0x1A	; 26
 342:	2a 95       	dec	r18
 344:	f1 f7       	brne	.-4      	; 0x342 <_ZN3LCD4initEv+0x2b0>
 346:	00 c0       	rjmp	.+0      	; 0x348 <_ZN3LCD4initEv+0x2b6>
		set_EN();
		
		//send low nibble
		command = 0x00;
		command |= ((nibble<<4) & (0xF0));
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 348:	a2 81       	ldd	r26, Z+2	; 0x02
 34a:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 34c:	8c 91       	ld	r24, X
 34e:	80 76       	andi	r24, 0x60	; 96
 350:	8c 93       	st	X, r24
		(*_register) |= (_value);	
 352:	8c 91       	ld	r24, X
 354:	80 66       	ori	r24, 0x60	; 96
 356:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 358:	a2 81       	ldd	r26, Z+2	; 0x02
 35a:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 35c:	8c 91       	ld	r24, X
 35e:	88 60       	ori	r24, 0x08	; 8
 360:	8c 93       	st	X, r24
 362:	85 e8       	ldi	r24, 0x85	; 133
 364:	8a 95       	dec	r24
 366:	f1 f7       	brne	.-4      	; 0x364 <_ZN3LCD4initEv+0x2d2>
 368:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 36a:	a2 81       	ldd	r26, Z+2	; 0x02
 36c:	b3 81       	ldd	r27, Z+3	; 0x03
		else
			(*_register) &= ~(1 << _pinNumber);
 36e:	8c 91       	ld	r24, X
 370:	87 7f       	andi	r24, 0xF7	; 247
 372:	8c 93       	st	X, r24
 374:	9a e1       	ldi	r25, 0x1A	; 26
 376:	9a 95       	dec	r25
 378:	f1 f7       	brne	.-4      	; 0x376 <_ZN3LCD4initEv+0x2e4>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <_ZN3LCD4initEv+0x2ea>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	8f e9       	ldi	r24, 0x9F	; 159
 37e:	9f e0       	ldi	r25, 0x0F	; 15
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <_ZN3LCD4initEv+0x2ee>
 384:	00 c0       	rjmp	.+0      	; 0x386 <_ZN3LCD4initEv+0x2f4>
 386:	00 00       	nop
	void write_8_bit_control_command(uint8_t nibble)
	{
		//send high nibble
		uint8_t command = 0x00;
		command |= (nibble & 0xF0);
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 388:	a2 81       	ldd	r26, Z+2	; 0x02
 38a:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 38c:	8c 91       	ld	r24, X
 38e:	1c 92       	st	X, r1
		(*_register) |= (_value);	
 390:	8c 91       	ld	r24, X
 392:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 394:	a2 81       	ldd	r26, Z+2	; 0x02
 396:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 398:	8c 91       	ld	r24, X
 39a:	88 60       	ori	r24, 0x08	; 8
 39c:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39e:	95 e8       	ldi	r25, 0x85	; 133
 3a0:	9a 95       	dec	r25
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <_ZN3LCD4initEv+0x30e>
 3a4:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 3a6:	a2 81       	ldd	r26, Z+2	; 0x02
 3a8:	b3 81       	ldd	r27, Z+3	; 0x03
		else
			(*_register) &= ~(1 << _pinNumber);
 3aa:	8c 91       	ld	r24, X
 3ac:	87 7f       	andi	r24, 0xF7	; 247
 3ae:	8c 93       	st	X, r24
 3b0:	2a e1       	ldi	r18, 0x1A	; 26
 3b2:	2a 95       	dec	r18
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <_ZN3LCD4initEv+0x320>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <_ZN3LCD4initEv+0x326>
		set_EN();
		
		//send low nibble
		command = 0x00;
		command |= ((nibble<<4) & (0xF0));
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 3b8:	a2 81       	ldd	r26, Z+2	; 0x02
 3ba:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 3bc:	8c 91       	ld	r24, X
 3be:	80 7f       	andi	r24, 0xF0	; 240
 3c0:	8c 93       	st	X, r24
		(*_register) |= (_value);	
 3c2:	8c 91       	ld	r24, X
 3c4:	80 6f       	ori	r24, 0xF0	; 240
 3c6:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 3c8:	a2 81       	ldd	r26, Z+2	; 0x02
 3ca:	b3 81       	ldd	r27, Z+3	; 0x03
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 3cc:	8c 91       	ld	r24, X
 3ce:	88 60       	ori	r24, 0x08	; 8
 3d0:	8c 93       	st	X, r24
 3d2:	85 e8       	ldi	r24, 0x85	; 133
 3d4:	8a 95       	dec	r24
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <_ZN3LCD4initEv+0x342>
 3d8:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 3da:	02 80       	ldd	r0, Z+2	; 0x02
 3dc:	f3 81       	ldd	r31, Z+3	; 0x03
 3de:	e0 2d       	mov	r30, r0
		else
			(*_register) &= ~(1 << _pinNumber);
 3e0:	80 81       	ld	r24, Z
 3e2:	87 7f       	andi	r24, 0xF7	; 247
 3e4:	80 83       	st	Z, r24
 3e6:	9a e1       	ldi	r25, 0x1A	; 26
 3e8:	9a 95       	dec	r25
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <_ZN3LCD4initEv+0x356>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <_ZN3LCD4initEv+0x35c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ee:	8f e9       	ldi	r24, 0x9F	; 159
 3f0:	9f e0       	ldi	r25, 0x0F	; 15
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <_ZN3LCD4initEv+0x360>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <_ZN3LCD4initEv+0x366>
 3f8:	00 00       	nop
 3fa:	08 95       	ret

000003fc <_ZN5MyADC4initEv>:
	public:
	
	static void init()
	{
		//Internal Reference Voltage 
		ADMUX |= (1<<REFS1);
 3fc:	3f 9a       	sbi	0x07, 7	; 7
		ADMUX |= (1<<REFS0);
 3fe:	3e 9a       	sbi	0x07, 6	; 7
		
		//ADC left Adjust Result -> For 8bit-Resolution only ADCH Register is required
		ADMUX |= (1<<ADLAR);
 400:	3d 9a       	sbi	0x07, 5	; 7
	}
	
	//Bsp.: DDR_pin_to_input(&DDRA, PA2)
	static void DDR_pin_to_input(volatile uint8_t* _register, int _pinNumber)
	{
		(*_register) &= ~(1 << _pinNumber);
 402:	d0 98       	cbi	0x1a, 0	; 26
		
		//Single Ended Input PA0
		MyGPIO::DDR_pin_to_input(&DDRA, PA0);
		ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3) | (1 << MUX4));
 404:	87 b1       	in	r24, 0x07	; 7
 406:	80 7e       	andi	r24, 0xE0	; 224
 408:	87 b9       	out	0x07, r24	; 7

		
		//Enable ADC
		ADCSRA |= (1<<ADEN);
 40a:	37 9a       	sbi	0x06, 7	; 6
		
		//Enable ADC Interrupt
		//ADCSRA |= (1<<ADIE);
		
		//ADC AUTO Trigger Enable
		ADCSRA |= (1<<ADATE);
 40c:	35 9a       	sbi	0x06, 5	; 6
		
		//Prescaler 64
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1);
 40e:	86 b1       	in	r24, 0x06	; 6
 410:	86 60       	ori	r24, 0x06	; 6
 412:	86 b9       	out	0x06, r24	; 6
		ADCSRA &= ~(1 << ADPS0);
 414:	30 98       	cbi	0x06, 0	; 6
		
		//Free Running Mode
		SFIOR &= ~((1 << ADTS0) | (1 << ADTS1) | (1 << ADTS2));
 416:	80 b7       	in	r24, 0x30	; 48
 418:	8f 71       	andi	r24, 0x1F	; 31
 41a:	80 bf       	out	0x30, r24	; 48
		
		//Start first conversion
		ADCSRA |= (1<<ADSC);
 41c:	36 9a       	sbi	0x06, 6	; 6
 41e:	08 95       	ret

00000420 <_ZN3PWM8init_PWMEv>:
	}
	
	//Bsp.: DDR_pin_to_output(&DDRA, PA2)
	static void DDR_pin_to_output(volatile uint8_t* _register, int _pinNumber)
	{
		(*_register) |= (1 << _pinNumber);
 420:	8f 9a       	sbi	0x11, 7	; 17
	static void init_PWM()
	{
		MyGPIO::DDR_pin_to_output(&DDRD, PD7);
		//DDRD |= (1<<PD7);
		//Fast PWM Mode
		TCCR2 |= (1 << WGM20);
 422:	85 b5       	in	r24, 0x25	; 37
 424:	80 64       	ori	r24, 0x40	; 64
 426:	85 bd       	out	0x25, r24	; 37
		TCCR2 |= (1 << WGM21);
 428:	85 b5       	in	r24, 0x25	; 37
 42a:	88 60       	ori	r24, 0x08	; 8
 42c:	85 bd       	out	0x25, r24	; 37
		
		//Compare Mode, Fast PWM Mode -> COM21 = 1 & COM20 = 0 -> non-inverting Mode
		TCCR2 |= (1 << COM21);
 42e:	85 b5       	in	r24, 0x25	; 37
 430:	80 62       	ori	r24, 0x20	; 32
 432:	85 bd       	out	0x25, r24	; 37
		TCCR2 &= ~(1 << COM20);
 434:	85 b5       	in	r24, 0x25	; 37
 436:	8f 7e       	andi	r24, 0xEF	; 239
 438:	85 bd       	out	0x25, r24	; 37
		
		//Prescaler 256
		TCCR2 |= (1<<CS22) | (1<<CS21);
 43a:	85 b5       	in	r24, 0x25	; 37
 43c:	86 60       	ori	r24, 0x06	; 6
 43e:	85 bd       	out	0x25, r24	; 37
		TCCR2 &= ~(1<<CS20);
 440:	85 b5       	in	r24, 0x25	; 37
 442:	8e 7f       	andi	r24, 0xFE	; 254
 444:	85 bd       	out	0x25, r24	; 37
 446:	08 95       	ret

00000448 <main>:
#include "PWM.h"

uint16_t g_timeBetweenTwoFlagsUs;

int main(void)
{	
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
 450:	a6 97       	sbiw	r28, 0x26	; 38
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	f8 94       	cli
 456:	de bf       	out	0x3e, r29	; 62
 458:	0f be       	out	0x3f, r0	; 63
 45a:	cd bf       	out	0x3d, r28	; 61
	
	void init()
	{
		m_rpm = 0;
		//configure external interrupt on pin PD2
		GICR |= (1 << INT0);
 45c:	8b b7       	in	r24, 0x3b	; 59
 45e:	80 64       	ori	r24, 0x40	; 64
 460:	8b bf       	out	0x3b, r24	; 59
		//using falling edge triggering
		MCUCR |= (1<<ISC01) | (0<<ISC00);
 462:	85 b7       	in	r24, 0x35	; 53
 464:	82 60       	ori	r24, 0x02	; 2
 466:	85 bf       	out	0x35, r24	; 53
	
	public:
	
	LCD(volatile uint8_t* _DDR, volatile uint8_t* _port)
	{
		m_DDR = _DDR;
 468:	87 e3       	ldi	r24, 0x37	; 55
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	9a 83       	std	Y+2, r25	; 0x02
 46e:	89 83       	std	Y+1, r24	; 0x01
		m_port = _port;
 470:	88 e3       	ldi	r24, 0x38	; 56
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	9c 83       	std	Y+4, r25	; 0x04
 476:	8b 83       	std	Y+3, r24	; 0x03
		init();
 478:	ce 01       	movw	r24, r28
 47a:	01 96       	adiw	r24, 0x01	; 1
 47c:	0e 94 49 00 	call	0x92	; 0x92 <_ZN3LCD4initEv>
	Fan fan;
	LCD lcd(&DDRB,&PORTB);	
	MyADC::init();
 480:	0e 94 fe 01 	call	0x3fc	; 0x3fc <_ZN5MyADC4initEv>
	public:
	static void init_timer1()
	{		
		//TCCR1A &= (0x00);
		//Timer/Counter Interrupt mask register -> CS10 = Prescaler 1/f
		TCCR1B |= (1 << CS11);
 484:	8e b5       	in	r24, 0x2e	; 46
 486:	82 60       	ori	r24, 0x02	; 2
 488:	8e bd       	out	0x2e, r24	; 46
		TCCR1B &= ~((1 << CS10) | (1 << CS12));
 48a:	8e b5       	in	r24, 0x2e	; 46
 48c:	8a 7f       	andi	r24, 0xFA	; 250
 48e:	8e bd       	out	0x2e, r24	; 46
	Timer::init_timer1();
	PWM::init_PWM();
 490:	0e 94 10 02 	call	0x420	; 0x420 <_ZN3PWM8init_PWMEv>
		
	sei();
 494:	78 94       	sei
	void print_all(uint16_t timeBetweenTwoFlagsUs, uint16_t rpm, uint8_t dutyTimePercent)
	{
		char Displayline1[17];
		char Displayline2[17];
		clear_display();
		sprintf(Displayline1, "%uus | Duty", timeBetweenTwoFlagsUs);
 496:	0f 2e       	mov	r0, r31
 498:	f0 e6       	ldi	r31, 0x60	; 96
 49a:	8f 2e       	mov	r8, r31
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	9f 2e       	mov	r9, r31
 4a0:	f0 2d       	mov	r31, r0
 4a2:	5e 01       	movw	r10, r28
 4a4:	26 e1       	ldi	r18, 0x16	; 22
 4a6:	a2 0e       	add	r10, r18
 4a8:	b1 1c       	adc	r11, r1
		if(rpm < 1000)
			sprintf(Displayline2, "%urpm  | %u%%", rpm, dutyTimePercent);
		else
			sprintf(Displayline2, "%urpm | %u%%", rpm, dutyTimePercent);
 4aa:	3e 01       	movw	r6, r28
 4ac:	85 e0       	ldi	r24, 0x05	; 5
 4ae:	68 0e       	add	r6, r24
 4b0:	71 1c       	adc	r7, r1
		char Displayline1[17];
		char Displayline2[17];
		clear_display();
		sprintf(Displayline1, "%uus | Duty", timeBetweenTwoFlagsUs);
		if(rpm < 1000)
			sprintf(Displayline2, "%urpm  | %u%%", rpm, dutyTimePercent);
 4b2:	0f 2e       	mov	r0, r31
 4b4:	fc e6       	ldi	r31, 0x6C	; 108
 4b6:	2f 2e       	mov	r2, r31
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	3f 2e       	mov	r3, r31
 4bc:	f0 2d       	mov	r31, r0
		//{}		
	}
	
	static uint8_t get_ADC_input()
	{
		return ADCH;
 4be:	85 b1       	in	r24, 0x05	; 5
	}
	
	//Bsp.: set_Timer2_PWM_duty_time(210);
	static void set_PWM_duty_time(uint8_t _dutyTime)
	{
		OCR2 = _dutyTime;
 4c0:	83 bd       	out	0x23, r24	; 35

	while (1)
	{
		PWM::set_PWM_duty_time(MyADC::get_ADC_input());
		fan.RPMCalc(g_timeBetweenTwoFlagsUs);
 4c2:	c0 90 88 00 	lds	r12, 0x0088	; 0x800088 <__data_end>
 4c6:	d0 90 89 00 	lds	r13, 0x0089	; 0x800089 <__data_end+0x1>
		init();
	}
	
	uint16_t RPMCalc(uint16_t _timeBetweenTwoFlags)
	{
		return m_rpm = (uint16_t)((1000000*60)/((uint32_t)_timeBetweenTwoFlags*2));
 4ca:	c6 01       	movw	r24, r12
 4cc:	a0 e0       	ldi	r26, 0x00	; 0
 4ce:	b0 e0       	ldi	r27, 0x00	; 0
 4d0:	9c 01       	movw	r18, r24
 4d2:	ad 01       	movw	r20, r26
 4d4:	22 0f       	add	r18, r18
 4d6:	33 1f       	adc	r19, r19
 4d8:	44 1f       	adc	r20, r20
 4da:	55 1f       	adc	r21, r21
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	77 e8       	ldi	r23, 0x87	; 135
 4e0:	83 e9       	ldi	r24, 0x93	; 147
 4e2:	93 e0       	ldi	r25, 0x03	; 3
 4e4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__udivmodsi4>
 4e8:	52 2e       	mov	r5, r18
 4ea:	43 2e       	mov	r4, r19
 4ec:	02 2f       	mov	r16, r18
 4ee:	13 2f       	mov	r17, r19
		return OCR2;
	}
	
	static uint8_t get_PWM_duty_time_percent()
	{
		return (OCR2*100)/255;
 4f0:	83 b5       	in	r24, 0x23	; 35
 4f2:	24 e6       	ldi	r18, 0x64	; 100
 4f4:	28 9f       	mul	r18, r24
 4f6:	c0 01       	movw	r24, r0
 4f8:	11 24       	eor	r1, r1
 4fa:	6f ef       	ldi	r22, 0xFF	; 255
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__divmodhi4>
 502:	7b 01       	movw	r14, r22
	void write_8_bit_control_command(uint8_t nibble)
	{
		//send high nibble
		uint8_t command = 0x00;
		command |= (nibble & 0xF0);
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 504:	eb 81       	ldd	r30, Y+3	; 0x03
 506:	fc 81       	ldd	r31, Y+4	; 0x04
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 508:	80 81       	ld	r24, Z
 50a:	10 82       	st	Z, r1
		(*_register) |= (_value);	
 50c:	80 81       	ld	r24, Z
 50e:	80 83       	st	Z, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 510:	eb 81       	ldd	r30, Y+3	; 0x03
 512:	fc 81       	ldd	r31, Y+4	; 0x04
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 514:	80 81       	ld	r24, Z
 516:	88 60       	ori	r24, 0x08	; 8
 518:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51a:	85 e8       	ldi	r24, 0x85	; 133
 51c:	8a 95       	dec	r24
 51e:	f1 f7       	brne	.-4      	; 0x51c <main+0xd4>
 520:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 522:	eb 81       	ldd	r30, Y+3	; 0x03
 524:	fc 81       	ldd	r31, Y+4	; 0x04
		else
			(*_register) &= ~(1 << _pinNumber);
 526:	80 81       	ld	r24, Z
 528:	87 7f       	andi	r24, 0xF7	; 247
 52a:	80 83       	st	Z, r24
 52c:	9a e1       	ldi	r25, 0x1A	; 26
 52e:	9a 95       	dec	r25
 530:	f1 f7       	brne	.-4      	; 0x52e <main+0xe6>
 532:	00 c0       	rjmp	.+0      	; 0x534 <main+0xec>
		set_EN();
		
		//send low nibble
		command = 0x00;
		command |= ((nibble<<4) & (0xF0));
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 534:	eb 81       	ldd	r30, Y+3	; 0x03
 536:	fc 81       	ldd	r31, Y+4	; 0x04
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 538:	80 81       	ld	r24, Z
 53a:	80 71       	andi	r24, 0x10	; 16
 53c:	80 83       	st	Z, r24
		(*_register) |= (_value);	
 53e:	80 81       	ld	r24, Z
 540:	80 61       	ori	r24, 0x10	; 16
 542:	80 83       	st	Z, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 544:	eb 81       	ldd	r30, Y+3	; 0x03
 546:	fc 81       	ldd	r31, Y+4	; 0x04
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 548:	80 81       	ld	r24, Z
 54a:	88 60       	ori	r24, 0x08	; 8
 54c:	80 83       	st	Z, r24
 54e:	25 e8       	ldi	r18, 0x85	; 133
 550:	2a 95       	dec	r18
 552:	f1 f7       	brne	.-4      	; 0x550 <main+0x108>
 554:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 556:	eb 81       	ldd	r30, Y+3	; 0x03
 558:	fc 81       	ldd	r31, Y+4	; 0x04
		else
			(*_register) &= ~(1 << _pinNumber);
 55a:	80 81       	ld	r24, Z
 55c:	87 7f       	andi	r24, 0xF7	; 247
 55e:	80 83       	st	Z, r24
 560:	8a e1       	ldi	r24, 0x1A	; 26
 562:	8a 95       	dec	r24
 564:	f1 f7       	brne	.-4      	; 0x562 <main+0x11a>
 566:	00 c0       	rjmp	.+0      	; 0x568 <main+0x120>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 568:	8f e9       	ldi	r24, 0x9F	; 159
 56a:	9f e0       	ldi	r25, 0x0F	; 15
 56c:	01 97       	sbiw	r24, 0x01	; 1
 56e:	f1 f7       	brne	.-4      	; 0x56c <main+0x124>
 570:	00 c0       	rjmp	.+0      	; 0x572 <main+0x12a>
 572:	00 00       	nop
 574:	8f e6       	ldi	r24, 0x6F	; 111
 576:	97 e1       	ldi	r25, 0x17	; 23
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	f1 f7       	brne	.-4      	; 0x578 <main+0x130>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <main+0x136>
 57e:	00 00       	nop
	void print_all(uint16_t timeBetweenTwoFlagsUs, uint16_t rpm, uint8_t dutyTimePercent)
	{
		char Displayline1[17];
		char Displayline2[17];
		clear_display();
		sprintf(Displayline1, "%uus | Duty", timeBetweenTwoFlagsUs);
 580:	df 92       	push	r13
 582:	cf 92       	push	r12
 584:	9f 92       	push	r9
 586:	8f 92       	push	r8
 588:	bf 92       	push	r11
 58a:	af 92       	push	r10
 58c:	0e 94 2c 04 	call	0x858	; 0x858 <sprintf>
		if(rpm < 1000)
 590:	0f 90       	pop	r0
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	0f 90       	pop	r0
 59a:	0f 90       	pop	r0
 59c:	08 3e       	cpi	r16, 0xE8	; 232
 59e:	13 40       	sbci	r17, 0x03	; 3
 5a0:	a0 f4       	brcc	.+40     	; 0x5ca <main+0x182>
			sprintf(Displayline2, "%urpm  | %u%%", rpm, dutyTimePercent);
 5a2:	ff 24       	eor	r15, r15
 5a4:	ff 92       	push	r15
 5a6:	ef 92       	push	r14
 5a8:	4f 92       	push	r4
 5aa:	5f 92       	push	r5
 5ac:	3f 92       	push	r3
 5ae:	2f 92       	push	r2
 5b0:	7f 92       	push	r7
 5b2:	6f 92       	push	r6
 5b4:	0e 94 2c 04 	call	0x858	; 0x858 <sprintf>
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	de bf       	out	0x3e, r29	; 62
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	cd bf       	out	0x3d, r28	; 61
		write_8_bit_control_command(0x0F);	
	}
	
	void print_text(const char* txt)
	{
		while(*txt != '\0')
 5c2:	8e 89       	ldd	r24, Y+22	; 0x16
 5c4:	81 11       	cpse	r24, r1
 5c6:	14 c0       	rjmp	.+40     	; 0x5f0 <main+0x1a8>
 5c8:	5a c0       	rjmp	.+180    	; 0x67e <main+0x236>
		clear_display();
		sprintf(Displayline1, "%uus | Duty", timeBetweenTwoFlagsUs);
		if(rpm < 1000)
			sprintf(Displayline2, "%urpm  | %u%%", rpm, dutyTimePercent);
		else
			sprintf(Displayline2, "%urpm | %u%%", rpm, dutyTimePercent);
 5ca:	ff 24       	eor	r15, r15
 5cc:	ff 92       	push	r15
 5ce:	ef 92       	push	r14
 5d0:	4f 92       	push	r4
 5d2:	5f 92       	push	r5
 5d4:	8a e7       	ldi	r24, 0x7A	; 122
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	9f 93       	push	r25
 5da:	8f 93       	push	r24
 5dc:	7f 92       	push	r7
 5de:	6f 92       	push	r6
 5e0:	0e 94 2c 04 	call	0x858	; 0x858 <sprintf>
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	f8 94       	cli
 5e8:	de bf       	out	0x3e, r29	; 62
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	cd bf       	out	0x3d, r28	; 61
 5ee:	e9 cf       	rjmp	.-46     	; 0x5c2 <main+0x17a>
 5f0:	fe 01       	movw	r30, r28
 5f2:	77 96       	adiw	r30, 0x17	; 23
	
	void write_8_bit_data_command(uint8_t nibble)
	{
		//send high nibble
		uint8_t command = 0x04;
		command |= (nibble & 0xF0);
 5f4:	98 2f       	mov	r25, r24
 5f6:	90 7f       	andi	r25, 0xF0	; 240
 5f8:	94 60       	ori	r25, 0x04	; 4
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 5fa:	ab 81       	ldd	r26, Y+3	; 0x03
 5fc:	bc 81       	ldd	r27, Y+4	; 0x04
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 5fe:	2c 91       	ld	r18, X
 600:	29 23       	and	r18, r25
 602:	2c 93       	st	X, r18
		(*_register) |= (_value);	
 604:	2c 91       	ld	r18, X
 606:	92 2b       	or	r25, r18
 608:	9c 93       	st	X, r25
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 60a:	ab 81       	ldd	r26, Y+3	; 0x03
 60c:	bc 81       	ldd	r27, Y+4	; 0x04
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 60e:	9c 91       	ld	r25, X
 610:	98 60       	ori	r25, 0x08	; 8
 612:	9c 93       	st	X, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 614:	95 e8       	ldi	r25, 0x85	; 133
 616:	9a 95       	dec	r25
 618:	f1 f7       	brne	.-4      	; 0x616 <main+0x1ce>
 61a:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 61c:	ab 81       	ldd	r26, Y+3	; 0x03
 61e:	bc 81       	ldd	r27, Y+4	; 0x04
		else
			(*_register) &= ~(1 << _pinNumber);
 620:	9c 91       	ld	r25, X
 622:	97 7f       	andi	r25, 0xF7	; 247
 624:	9c 93       	st	X, r25
 626:	2a e1       	ldi	r18, 0x1A	; 26
 628:	2a 95       	dec	r18
 62a:	f1 f7       	brne	.-4      	; 0x628 <main+0x1e0>
 62c:	00 c0       	rjmp	.+0      	; 0x62e <main+0x1e6>
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
		set_EN();
		
		//send low nibble
		command = 0x04;
		command |= ((nibble<<4) & (0xF0));
 62e:	20 e1       	ldi	r18, 0x10	; 16
 630:	82 9f       	mul	r24, r18
 632:	c0 01       	movw	r24, r0
 634:	11 24       	eor	r1, r1
 636:	84 60       	ori	r24, 0x04	; 4
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 638:	ab 81       	ldd	r26, Y+3	; 0x03
 63a:	bc 81       	ldd	r27, Y+4	; 0x04
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 63c:	9c 91       	ld	r25, X
 63e:	98 23       	and	r25, r24
 640:	9c 93       	st	X, r25
		(*_register) |= (_value);	
 642:	9c 91       	ld	r25, X
 644:	89 2b       	or	r24, r25
 646:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 648:	ab 81       	ldd	r26, Y+3	; 0x03
 64a:	bc 81       	ldd	r27, Y+4	; 0x04
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 64c:	8c 91       	ld	r24, X
 64e:	88 60       	ori	r24, 0x08	; 8
 650:	8c 93       	st	X, r24
 652:	85 e8       	ldi	r24, 0x85	; 133
 654:	8a 95       	dec	r24
 656:	f1 f7       	brne	.-4      	; 0x654 <main+0x20c>
 658:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 65a:	ab 81       	ldd	r26, Y+3	; 0x03
 65c:	bc 81       	ldd	r27, Y+4	; 0x04
		else
			(*_register) &= ~(1 << _pinNumber);
 65e:	8c 91       	ld	r24, X
 660:	87 7f       	andi	r24, 0xF7	; 247
 662:	8c 93       	st	X, r24
 664:	9a e1       	ldi	r25, 0x1A	; 26
 666:	9a 95       	dec	r25
 668:	f1 f7       	brne	.-4      	; 0x666 <main+0x21e>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <main+0x224>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 66c:	8f e9       	ldi	r24, 0x9F	; 159
 66e:	9f e0       	ldi	r25, 0x0F	; 15
 670:	01 97       	sbiw	r24, 0x01	; 1
 672:	f1 f7       	brne	.-4      	; 0x670 <main+0x228>
 674:	00 c0       	rjmp	.+0      	; 0x676 <main+0x22e>
 676:	00 00       	nop
		write_8_bit_control_command(0x0F);	
	}
	
	void print_text(const char* txt)
	{
		while(*txt != '\0')
 678:	81 91       	ld	r24, Z+
 67a:	81 11       	cpse	r24, r1
 67c:	bb cf       	rjmp	.-138    	; 0x5f4 <main+0x1ac>
	void write_8_bit_control_command(uint8_t nibble)
	{
		//send high nibble
		uint8_t command = 0x00;
		command |= (nibble & 0xF0);
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 67e:	eb 81       	ldd	r30, Y+3	; 0x03
 680:	fc 81       	ldd	r31, Y+4	; 0x04
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 682:	80 81       	ld	r24, Z
 684:	80 7c       	andi	r24, 0xC0	; 192
 686:	80 83       	st	Z, r24
		(*_register) |= (_value);	
 688:	80 81       	ld	r24, Z
 68a:	80 6c       	ori	r24, 0xC0	; 192
 68c:	80 83       	st	Z, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 68e:	eb 81       	ldd	r30, Y+3	; 0x03
 690:	fc 81       	ldd	r31, Y+4	; 0x04
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 692:	80 81       	ld	r24, Z
 694:	88 60       	ori	r24, 0x08	; 8
 696:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 698:	95 e8       	ldi	r25, 0x85	; 133
 69a:	9a 95       	dec	r25
 69c:	f1 f7       	brne	.-4      	; 0x69a <main+0x252>
 69e:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 6a0:	eb 81       	ldd	r30, Y+3	; 0x03
 6a2:	fc 81       	ldd	r31, Y+4	; 0x04
		else
			(*_register) &= ~(1 << _pinNumber);
 6a4:	80 81       	ld	r24, Z
 6a6:	87 7f       	andi	r24, 0xF7	; 247
 6a8:	80 83       	st	Z, r24
 6aa:	2a e1       	ldi	r18, 0x1A	; 26
 6ac:	2a 95       	dec	r18
 6ae:	f1 f7       	brne	.-4      	; 0x6ac <main+0x264>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <main+0x26a>
		set_EN();
		
		//send low nibble
		command = 0x00;
		command |= ((nibble<<4) & (0xF0));
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 6b2:	eb 81       	ldd	r30, Y+3	; 0x03
 6b4:	fc 81       	ldd	r31, Y+4	; 0x04
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 6b6:	80 81       	ld	r24, Z
 6b8:	10 82       	st	Z, r1
		(*_register) |= (_value);	
 6ba:	80 81       	ld	r24, Z
 6bc:	80 83       	st	Z, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 6be:	eb 81       	ldd	r30, Y+3	; 0x03
 6c0:	fc 81       	ldd	r31, Y+4	; 0x04
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 6c2:	80 81       	ld	r24, Z
 6c4:	88 60       	ori	r24, 0x08	; 8
 6c6:	80 83       	st	Z, r24
 6c8:	85 e8       	ldi	r24, 0x85	; 133
 6ca:	8a 95       	dec	r24
 6cc:	f1 f7       	brne	.-4      	; 0x6ca <main+0x282>
 6ce:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 6d0:	eb 81       	ldd	r30, Y+3	; 0x03
 6d2:	fc 81       	ldd	r31, Y+4	; 0x04
		else
			(*_register) &= ~(1 << _pinNumber);
 6d4:	80 81       	ld	r24, Z
 6d6:	87 7f       	andi	r24, 0xF7	; 247
 6d8:	80 83       	st	Z, r24
 6da:	9a e1       	ldi	r25, 0x1A	; 26
 6dc:	9a 95       	dec	r25
 6de:	f1 f7       	brne	.-4      	; 0x6dc <main+0x294>
 6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <main+0x29a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6e2:	8f e9       	ldi	r24, 0x9F	; 159
 6e4:	9f e0       	ldi	r25, 0x0F	; 15
 6e6:	01 97       	sbiw	r24, 0x01	; 1
 6e8:	f1 f7       	brne	.-4      	; 0x6e6 <main+0x29e>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0x2a4>
 6ec:	00 00       	nop
		write_8_bit_control_command(0x0F);	
	}
	
	void print_text(const char* txt)
	{
		while(*txt != '\0')
 6ee:	8d 81       	ldd	r24, Y+5	; 0x05
 6f0:	88 23       	and	r24, r24
 6f2:	09 f4       	brne	.+2      	; 0x6f6 <main+0x2ae>
 6f4:	47 c0       	rjmp	.+142    	; 0x784 <main+0x33c>
 6f6:	fe 01       	movw	r30, r28
 6f8:	36 96       	adiw	r30, 0x06	; 6
	
	void write_8_bit_data_command(uint8_t nibble)
	{
		//send high nibble
		uint8_t command = 0x04;
		command |= (nibble & 0xF0);
 6fa:	98 2f       	mov	r25, r24
 6fc:	90 7f       	andi	r25, 0xF0	; 240
 6fe:	94 60       	ori	r25, 0x04	; 4
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 700:	ab 81       	ldd	r26, Y+3	; 0x03
 702:	bc 81       	ldd	r27, Y+4	; 0x04
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 704:	2c 91       	ld	r18, X
 706:	29 23       	and	r18, r25
 708:	2c 93       	st	X, r18
		(*_register) |= (_value);	
 70a:	2c 91       	ld	r18, X
 70c:	92 2b       	or	r25, r18
 70e:	9c 93       	st	X, r25
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 710:	ab 81       	ldd	r26, Y+3	; 0x03
 712:	bc 81       	ldd	r27, Y+4	; 0x04
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 714:	9c 91       	ld	r25, X
 716:	98 60       	ori	r25, 0x08	; 8
 718:	9c 93       	st	X, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 71a:	95 e8       	ldi	r25, 0x85	; 133
 71c:	9a 95       	dec	r25
 71e:	f1 f7       	brne	.-4      	; 0x71c <main+0x2d4>
 720:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 722:	ab 81       	ldd	r26, Y+3	; 0x03
 724:	bc 81       	ldd	r27, Y+4	; 0x04
		else
			(*_register) &= ~(1 << _pinNumber);
 726:	9c 91       	ld	r25, X
 728:	97 7f       	andi	r25, 0xF7	; 247
 72a:	9c 93       	st	X, r25
 72c:	2a e1       	ldi	r18, 0x1A	; 26
 72e:	2a 95       	dec	r18
 730:	f1 f7       	brne	.-4      	; 0x72e <main+0x2e6>
 732:	00 c0       	rjmp	.+0      	; 0x734 <main+0x2ec>
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
		set_EN();
		
		//send low nibble
		command = 0x04;
		command |= ((nibble<<4) & (0xF0));
 734:	20 e1       	ldi	r18, 0x10	; 16
 736:	82 9f       	mul	r24, r18
 738:	c0 01       	movw	r24, r0
 73a:	11 24       	eor	r1, r1
 73c:	84 60       	ori	r24, 0x04	; 4
		MyGPIO::set_port_multiple_pins_with_clear(m_port, command);
 73e:	ab 81       	ldd	r26, Y+3	; 0x03
 740:	bc 81       	ldd	r27, Y+4	; 0x04
	
	//clears all other Bits 
	//Bsp.: set_port_multiple_pins_with_clear(&PORTA, PIN1h + PIN2h + PIN4h)
	static void set_port_multiple_pins_with_clear(volatile uint8_t* _register, uint8_t _value)
	{
		(*_register) &= (_value);
 742:	9c 91       	ld	r25, X
 744:	98 23       	and	r25, r24
 746:	9c 93       	st	X, r25
		(*_register) |= (_value);	
 748:	9c 91       	ld	r25, X
 74a:	89 2b       	or	r24, r25
 74c:	8c 93       	st	X, r24
	}

	inline void set_EN()
	{
		//set EN to high
		MyGPIO::set_port_pin(m_port, PB3, true);
 74e:	ab 81       	ldd	r26, Y+3	; 0x03
 750:	bc 81       	ldd	r27, Y+4	; 0x04
	
	//Bsp.: set_port_pin(&PORTA, PA2)
	static void set_port_pin(volatile uint8_t* _register, uint8_t _pinNumber, bool _flag)
	{
		if(_flag)
			(*_register) |= (1 << _pinNumber);
 752:	8c 91       	ld	r24, X
 754:	88 60       	ori	r24, 0x08	; 8
 756:	8c 93       	st	X, r24
 758:	85 e8       	ldi	r24, 0x85	; 133
 75a:	8a 95       	dec	r24
 75c:	f1 f7       	brne	.-4      	; 0x75a <main+0x312>
 75e:	00 00       	nop
		_delay_us(50);
		//set EN to low
		MyGPIO::set_port_pin(m_port, PB3, false);
 760:	ab 81       	ldd	r26, Y+3	; 0x03
 762:	bc 81       	ldd	r27, Y+4	; 0x04
		else
			(*_register) &= ~(1 << _pinNumber);
 764:	8c 91       	ld	r24, X
 766:	87 7f       	andi	r24, 0xF7	; 247
 768:	8c 93       	st	X, r24
 76a:	9a e1       	ldi	r25, 0x1A	; 26
 76c:	9a 95       	dec	r25
 76e:	f1 f7       	brne	.-4      	; 0x76c <main+0x324>
 770:	00 c0       	rjmp	.+0      	; 0x772 <main+0x32a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 772:	8f e9       	ldi	r24, 0x9F	; 159
 774:	9f e0       	ldi	r25, 0x0F	; 15
 776:	01 97       	sbiw	r24, 0x01	; 1
 778:	f1 f7       	brne	.-4      	; 0x776 <main+0x32e>
 77a:	00 c0       	rjmp	.+0      	; 0x77c <main+0x334>
 77c:	00 00       	nop
		write_8_bit_control_command(0x0F);	
	}
	
	void print_text(const char* txt)
	{
		while(*txt != '\0')
 77e:	81 91       	ld	r24, Z+
 780:	81 11       	cpse	r24, r1
 782:	bb cf       	rjmp	.-138    	; 0x6fa <main+0x2b2>
 784:	9f e7       	ldi	r25, 0x7F	; 127
 786:	25 eb       	ldi	r18, 0xB5	; 181
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	91 50       	subi	r25, 0x01	; 1
 78c:	20 40       	sbci	r18, 0x00	; 0
 78e:	80 40       	sbci	r24, 0x00	; 0
 790:	e1 f7       	brne	.-8      	; 0x78a <main+0x342>
 792:	00 c0       	rjmp	.+0      	; 0x794 <main+0x34c>
 794:	00 00       	nop
 796:	93 ce       	rjmp	.-730    	; 0x4be <main+0x76>

00000798 <__vector_1>:
		lcd.print_all(g_timeBetweenTwoFlagsUs, fan.getRPM(), PWM::get_PWM_duty_time_percent());		
	}
}

ISR(INT0_vect)
{	
 798:	1f 92       	push	r1
 79a:	0f 92       	push	r0
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	0f 92       	push	r0
 7a0:	11 24       	eor	r1, r1
 7a2:	8f 93       	push	r24
 7a4:	9f 93       	push	r25
		g_timeBetweenTwoFlagsUs = TCNT1;
 7a6:	8c b5       	in	r24, 0x2c	; 44
 7a8:	9d b5       	in	r25, 0x2d	; 45
 7aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 7ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
		TCNT1 = 0;
 7b2:	1d bc       	out	0x2d, r1	; 45
 7b4:	1c bc       	out	0x2c, r1	; 44
}
 7b6:	9f 91       	pop	r25
 7b8:	8f 91       	pop	r24
 7ba:	0f 90       	pop	r0
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	0f 90       	pop	r0
 7c0:	1f 90       	pop	r1
 7c2:	18 95       	reti

000007c4 <__divmodhi4>:
 7c4:	97 fb       	bst	r25, 7
 7c6:	07 2e       	mov	r0, r23
 7c8:	16 f4       	brtc	.+4      	; 0x7ce <__divmodhi4+0xa>
 7ca:	00 94       	com	r0
 7cc:	07 d0       	rcall	.+14     	; 0x7dc <__divmodhi4_neg1>
 7ce:	77 fd       	sbrc	r23, 7
 7d0:	09 d0       	rcall	.+18     	; 0x7e4 <__divmodhi4_neg2>
 7d2:	0e 94 18 04 	call	0x830	; 0x830 <__udivmodhi4>
 7d6:	07 fc       	sbrc	r0, 7
 7d8:	05 d0       	rcall	.+10     	; 0x7e4 <__divmodhi4_neg2>
 7da:	3e f4       	brtc	.+14     	; 0x7ea <__divmodhi4_exit>

000007dc <__divmodhi4_neg1>:
 7dc:	90 95       	com	r25
 7de:	81 95       	neg	r24
 7e0:	9f 4f       	sbci	r25, 0xFF	; 255
 7e2:	08 95       	ret

000007e4 <__divmodhi4_neg2>:
 7e4:	70 95       	com	r23
 7e6:	61 95       	neg	r22
 7e8:	7f 4f       	sbci	r23, 0xFF	; 255

000007ea <__divmodhi4_exit>:
 7ea:	08 95       	ret

000007ec <__udivmodsi4>:
 7ec:	a1 e2       	ldi	r26, 0x21	; 33
 7ee:	1a 2e       	mov	r1, r26
 7f0:	aa 1b       	sub	r26, r26
 7f2:	bb 1b       	sub	r27, r27
 7f4:	fd 01       	movw	r30, r26
 7f6:	0d c0       	rjmp	.+26     	; 0x812 <__udivmodsi4_ep>

000007f8 <__udivmodsi4_loop>:
 7f8:	aa 1f       	adc	r26, r26
 7fa:	bb 1f       	adc	r27, r27
 7fc:	ee 1f       	adc	r30, r30
 7fe:	ff 1f       	adc	r31, r31
 800:	a2 17       	cp	r26, r18
 802:	b3 07       	cpc	r27, r19
 804:	e4 07       	cpc	r30, r20
 806:	f5 07       	cpc	r31, r21
 808:	20 f0       	brcs	.+8      	; 0x812 <__udivmodsi4_ep>
 80a:	a2 1b       	sub	r26, r18
 80c:	b3 0b       	sbc	r27, r19
 80e:	e4 0b       	sbc	r30, r20
 810:	f5 0b       	sbc	r31, r21

00000812 <__udivmodsi4_ep>:
 812:	66 1f       	adc	r22, r22
 814:	77 1f       	adc	r23, r23
 816:	88 1f       	adc	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	1a 94       	dec	r1
 81c:	69 f7       	brne	.-38     	; 0x7f8 <__udivmodsi4_loop>
 81e:	60 95       	com	r22
 820:	70 95       	com	r23
 822:	80 95       	com	r24
 824:	90 95       	com	r25
 826:	9b 01       	movw	r18, r22
 828:	ac 01       	movw	r20, r24
 82a:	bd 01       	movw	r22, r26
 82c:	cf 01       	movw	r24, r30
 82e:	08 95       	ret

00000830 <__udivmodhi4>:
 830:	aa 1b       	sub	r26, r26
 832:	bb 1b       	sub	r27, r27
 834:	51 e1       	ldi	r21, 0x11	; 17
 836:	07 c0       	rjmp	.+14     	; 0x846 <__udivmodhi4_ep>

00000838 <__udivmodhi4_loop>:
 838:	aa 1f       	adc	r26, r26
 83a:	bb 1f       	adc	r27, r27
 83c:	a6 17       	cp	r26, r22
 83e:	b7 07       	cpc	r27, r23
 840:	10 f0       	brcs	.+4      	; 0x846 <__udivmodhi4_ep>
 842:	a6 1b       	sub	r26, r22
 844:	b7 0b       	sbc	r27, r23

00000846 <__udivmodhi4_ep>:
 846:	88 1f       	adc	r24, r24
 848:	99 1f       	adc	r25, r25
 84a:	5a 95       	dec	r21
 84c:	a9 f7       	brne	.-22     	; 0x838 <__udivmodhi4_loop>
 84e:	80 95       	com	r24
 850:	90 95       	com	r25
 852:	bc 01       	movw	r22, r24
 854:	cd 01       	movw	r24, r26
 856:	08 95       	ret

00000858 <sprintf>:
 858:	ae e0       	ldi	r26, 0x0E	; 14
 85a:	b0 e0       	ldi	r27, 0x00	; 0
 85c:	e2 e3       	ldi	r30, 0x32	; 50
 85e:	f4 e0       	ldi	r31, 0x04	; 4
 860:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__prologue_saves__+0x1c>
 864:	0d 89       	ldd	r16, Y+21	; 0x15
 866:	1e 89       	ldd	r17, Y+22	; 0x16
 868:	86 e0       	ldi	r24, 0x06	; 6
 86a:	8c 83       	std	Y+4, r24	; 0x04
 86c:	1a 83       	std	Y+2, r17	; 0x02
 86e:	09 83       	std	Y+1, r16	; 0x01
 870:	8f ef       	ldi	r24, 0xFF	; 255
 872:	9f e7       	ldi	r25, 0x7F	; 127
 874:	9e 83       	std	Y+6, r25	; 0x06
 876:	8d 83       	std	Y+5, r24	; 0x05
 878:	ae 01       	movw	r20, r28
 87a:	47 5e       	subi	r20, 0xE7	; 231
 87c:	5f 4f       	sbci	r21, 0xFF	; 255
 87e:	6f 89       	ldd	r22, Y+23	; 0x17
 880:	78 8d       	ldd	r23, Y+24	; 0x18
 882:	ce 01       	movw	r24, r28
 884:	01 96       	adiw	r24, 0x01	; 1
 886:	0e 94 4e 04 	call	0x89c	; 0x89c <vfprintf>
 88a:	ef 81       	ldd	r30, Y+7	; 0x07
 88c:	f8 85       	ldd	r31, Y+8	; 0x08
 88e:	e0 0f       	add	r30, r16
 890:	f1 1f       	adc	r31, r17
 892:	10 82       	st	Z, r1
 894:	2e 96       	adiw	r28, 0x0e	; 14
 896:	e4 e0       	ldi	r30, 0x04	; 4
 898:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__epilogue_restores__+0x1c>

0000089c <vfprintf>:
 89c:	ab e0       	ldi	r26, 0x0B	; 11
 89e:	b0 e0       	ldi	r27, 0x00	; 0
 8a0:	e4 e5       	ldi	r30, 0x54	; 84
 8a2:	f4 e0       	ldi	r31, 0x04	; 4
 8a4:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <__prologue_saves__>
 8a8:	6c 01       	movw	r12, r24
 8aa:	7b 01       	movw	r14, r22
 8ac:	8a 01       	movw	r16, r20
 8ae:	fc 01       	movw	r30, r24
 8b0:	17 82       	std	Z+7, r1	; 0x07
 8b2:	16 82       	std	Z+6, r1	; 0x06
 8b4:	83 81       	ldd	r24, Z+3	; 0x03
 8b6:	81 ff       	sbrs	r24, 1
 8b8:	cc c1       	rjmp	.+920    	; 0xc52 <vfprintf+0x3b6>
 8ba:	ce 01       	movw	r24, r28
 8bc:	01 96       	adiw	r24, 0x01	; 1
 8be:	3c 01       	movw	r6, r24
 8c0:	f6 01       	movw	r30, r12
 8c2:	93 81       	ldd	r25, Z+3	; 0x03
 8c4:	f7 01       	movw	r30, r14
 8c6:	93 fd       	sbrc	r25, 3
 8c8:	85 91       	lpm	r24, Z+
 8ca:	93 ff       	sbrs	r25, 3
 8cc:	81 91       	ld	r24, Z+
 8ce:	7f 01       	movw	r14, r30
 8d0:	88 23       	and	r24, r24
 8d2:	09 f4       	brne	.+2      	; 0x8d6 <vfprintf+0x3a>
 8d4:	ba c1       	rjmp	.+884    	; 0xc4a <vfprintf+0x3ae>
 8d6:	85 32       	cpi	r24, 0x25	; 37
 8d8:	39 f4       	brne	.+14     	; 0x8e8 <vfprintf+0x4c>
 8da:	93 fd       	sbrc	r25, 3
 8dc:	85 91       	lpm	r24, Z+
 8de:	93 ff       	sbrs	r25, 3
 8e0:	81 91       	ld	r24, Z+
 8e2:	7f 01       	movw	r14, r30
 8e4:	85 32       	cpi	r24, 0x25	; 37
 8e6:	29 f4       	brne	.+10     	; 0x8f2 <vfprintf+0x56>
 8e8:	b6 01       	movw	r22, r12
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 45 06 	call	0xc8a	; 0xc8a <fputc>
 8f0:	e7 cf       	rjmp	.-50     	; 0x8c0 <vfprintf+0x24>
 8f2:	91 2c       	mov	r9, r1
 8f4:	21 2c       	mov	r2, r1
 8f6:	31 2c       	mov	r3, r1
 8f8:	ff e1       	ldi	r31, 0x1F	; 31
 8fa:	f3 15       	cp	r31, r3
 8fc:	d8 f0       	brcs	.+54     	; 0x934 <vfprintf+0x98>
 8fe:	8b 32       	cpi	r24, 0x2B	; 43
 900:	79 f0       	breq	.+30     	; 0x920 <vfprintf+0x84>
 902:	38 f4       	brcc	.+14     	; 0x912 <vfprintf+0x76>
 904:	80 32       	cpi	r24, 0x20	; 32
 906:	79 f0       	breq	.+30     	; 0x926 <vfprintf+0x8a>
 908:	83 32       	cpi	r24, 0x23	; 35
 90a:	a1 f4       	brne	.+40     	; 0x934 <vfprintf+0x98>
 90c:	23 2d       	mov	r18, r3
 90e:	20 61       	ori	r18, 0x10	; 16
 910:	1d c0       	rjmp	.+58     	; 0x94c <vfprintf+0xb0>
 912:	8d 32       	cpi	r24, 0x2D	; 45
 914:	61 f0       	breq	.+24     	; 0x92e <vfprintf+0x92>
 916:	80 33       	cpi	r24, 0x30	; 48
 918:	69 f4       	brne	.+26     	; 0x934 <vfprintf+0x98>
 91a:	23 2d       	mov	r18, r3
 91c:	21 60       	ori	r18, 0x01	; 1
 91e:	16 c0       	rjmp	.+44     	; 0x94c <vfprintf+0xb0>
 920:	83 2d       	mov	r24, r3
 922:	82 60       	ori	r24, 0x02	; 2
 924:	38 2e       	mov	r3, r24
 926:	e3 2d       	mov	r30, r3
 928:	e4 60       	ori	r30, 0x04	; 4
 92a:	3e 2e       	mov	r3, r30
 92c:	2a c0       	rjmp	.+84     	; 0x982 <vfprintf+0xe6>
 92e:	f3 2d       	mov	r31, r3
 930:	f8 60       	ori	r31, 0x08	; 8
 932:	1d c0       	rjmp	.+58     	; 0x96e <vfprintf+0xd2>
 934:	37 fc       	sbrc	r3, 7
 936:	2d c0       	rjmp	.+90     	; 0x992 <vfprintf+0xf6>
 938:	20 ed       	ldi	r18, 0xD0	; 208
 93a:	28 0f       	add	r18, r24
 93c:	2a 30       	cpi	r18, 0x0A	; 10
 93e:	40 f0       	brcs	.+16     	; 0x950 <vfprintf+0xb4>
 940:	8e 32       	cpi	r24, 0x2E	; 46
 942:	b9 f4       	brne	.+46     	; 0x972 <vfprintf+0xd6>
 944:	36 fc       	sbrc	r3, 6
 946:	81 c1       	rjmp	.+770    	; 0xc4a <vfprintf+0x3ae>
 948:	23 2d       	mov	r18, r3
 94a:	20 64       	ori	r18, 0x40	; 64
 94c:	32 2e       	mov	r3, r18
 94e:	19 c0       	rjmp	.+50     	; 0x982 <vfprintf+0xe6>
 950:	36 fe       	sbrs	r3, 6
 952:	06 c0       	rjmp	.+12     	; 0x960 <vfprintf+0xc4>
 954:	8a e0       	ldi	r24, 0x0A	; 10
 956:	98 9e       	mul	r9, r24
 958:	20 0d       	add	r18, r0
 95a:	11 24       	eor	r1, r1
 95c:	92 2e       	mov	r9, r18
 95e:	11 c0       	rjmp	.+34     	; 0x982 <vfprintf+0xe6>
 960:	ea e0       	ldi	r30, 0x0A	; 10
 962:	2e 9e       	mul	r2, r30
 964:	20 0d       	add	r18, r0
 966:	11 24       	eor	r1, r1
 968:	22 2e       	mov	r2, r18
 96a:	f3 2d       	mov	r31, r3
 96c:	f0 62       	ori	r31, 0x20	; 32
 96e:	3f 2e       	mov	r3, r31
 970:	08 c0       	rjmp	.+16     	; 0x982 <vfprintf+0xe6>
 972:	8c 36       	cpi	r24, 0x6C	; 108
 974:	21 f4       	brne	.+8      	; 0x97e <vfprintf+0xe2>
 976:	83 2d       	mov	r24, r3
 978:	80 68       	ori	r24, 0x80	; 128
 97a:	38 2e       	mov	r3, r24
 97c:	02 c0       	rjmp	.+4      	; 0x982 <vfprintf+0xe6>
 97e:	88 36       	cpi	r24, 0x68	; 104
 980:	41 f4       	brne	.+16     	; 0x992 <vfprintf+0xf6>
 982:	f7 01       	movw	r30, r14
 984:	93 fd       	sbrc	r25, 3
 986:	85 91       	lpm	r24, Z+
 988:	93 ff       	sbrs	r25, 3
 98a:	81 91       	ld	r24, Z+
 98c:	7f 01       	movw	r14, r30
 98e:	81 11       	cpse	r24, r1
 990:	b3 cf       	rjmp	.-154    	; 0x8f8 <vfprintf+0x5c>
 992:	98 2f       	mov	r25, r24
 994:	9f 7d       	andi	r25, 0xDF	; 223
 996:	95 54       	subi	r25, 0x45	; 69
 998:	93 30       	cpi	r25, 0x03	; 3
 99a:	28 f4       	brcc	.+10     	; 0x9a6 <vfprintf+0x10a>
 99c:	0c 5f       	subi	r16, 0xFC	; 252
 99e:	1f 4f       	sbci	r17, 0xFF	; 255
 9a0:	9f e3       	ldi	r25, 0x3F	; 63
 9a2:	99 83       	std	Y+1, r25	; 0x01
 9a4:	0d c0       	rjmp	.+26     	; 0x9c0 <vfprintf+0x124>
 9a6:	83 36       	cpi	r24, 0x63	; 99
 9a8:	31 f0       	breq	.+12     	; 0x9b6 <vfprintf+0x11a>
 9aa:	83 37       	cpi	r24, 0x73	; 115
 9ac:	71 f0       	breq	.+28     	; 0x9ca <vfprintf+0x12e>
 9ae:	83 35       	cpi	r24, 0x53	; 83
 9b0:	09 f0       	breq	.+2      	; 0x9b4 <vfprintf+0x118>
 9b2:	59 c0       	rjmp	.+178    	; 0xa66 <vfprintf+0x1ca>
 9b4:	21 c0       	rjmp	.+66     	; 0x9f8 <vfprintf+0x15c>
 9b6:	f8 01       	movw	r30, r16
 9b8:	80 81       	ld	r24, Z
 9ba:	89 83       	std	Y+1, r24	; 0x01
 9bc:	0e 5f       	subi	r16, 0xFE	; 254
 9be:	1f 4f       	sbci	r17, 0xFF	; 255
 9c0:	88 24       	eor	r8, r8
 9c2:	83 94       	inc	r8
 9c4:	91 2c       	mov	r9, r1
 9c6:	53 01       	movw	r10, r6
 9c8:	13 c0       	rjmp	.+38     	; 0x9f0 <vfprintf+0x154>
 9ca:	28 01       	movw	r4, r16
 9cc:	f2 e0       	ldi	r31, 0x02	; 2
 9ce:	4f 0e       	add	r4, r31
 9d0:	51 1c       	adc	r5, r1
 9d2:	f8 01       	movw	r30, r16
 9d4:	a0 80       	ld	r10, Z
 9d6:	b1 80       	ldd	r11, Z+1	; 0x01
 9d8:	36 fe       	sbrs	r3, 6
 9da:	03 c0       	rjmp	.+6      	; 0x9e2 <vfprintf+0x146>
 9dc:	69 2d       	mov	r22, r9
 9de:	70 e0       	ldi	r23, 0x00	; 0
 9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <vfprintf+0x14a>
 9e2:	6f ef       	ldi	r22, 0xFF	; 255
 9e4:	7f ef       	ldi	r23, 0xFF	; 255
 9e6:	c5 01       	movw	r24, r10
 9e8:	0e 94 3a 06 	call	0xc74	; 0xc74 <strnlen>
 9ec:	4c 01       	movw	r8, r24
 9ee:	82 01       	movw	r16, r4
 9f0:	f3 2d       	mov	r31, r3
 9f2:	ff 77       	andi	r31, 0x7F	; 127
 9f4:	3f 2e       	mov	r3, r31
 9f6:	16 c0       	rjmp	.+44     	; 0xa24 <vfprintf+0x188>
 9f8:	28 01       	movw	r4, r16
 9fa:	22 e0       	ldi	r18, 0x02	; 2
 9fc:	42 0e       	add	r4, r18
 9fe:	51 1c       	adc	r5, r1
 a00:	f8 01       	movw	r30, r16
 a02:	a0 80       	ld	r10, Z
 a04:	b1 80       	ldd	r11, Z+1	; 0x01
 a06:	36 fe       	sbrs	r3, 6
 a08:	03 c0       	rjmp	.+6      	; 0xa10 <vfprintf+0x174>
 a0a:	69 2d       	mov	r22, r9
 a0c:	70 e0       	ldi	r23, 0x00	; 0
 a0e:	02 c0       	rjmp	.+4      	; 0xa14 <vfprintf+0x178>
 a10:	6f ef       	ldi	r22, 0xFF	; 255
 a12:	7f ef       	ldi	r23, 0xFF	; 255
 a14:	c5 01       	movw	r24, r10
 a16:	0e 94 2f 06 	call	0xc5e	; 0xc5e <strnlen_P>
 a1a:	4c 01       	movw	r8, r24
 a1c:	f3 2d       	mov	r31, r3
 a1e:	f0 68       	ori	r31, 0x80	; 128
 a20:	3f 2e       	mov	r3, r31
 a22:	82 01       	movw	r16, r4
 a24:	33 fc       	sbrc	r3, 3
 a26:	1b c0       	rjmp	.+54     	; 0xa5e <vfprintf+0x1c2>
 a28:	82 2d       	mov	r24, r2
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	88 16       	cp	r8, r24
 a2e:	99 06       	cpc	r9, r25
 a30:	b0 f4       	brcc	.+44     	; 0xa5e <vfprintf+0x1c2>
 a32:	b6 01       	movw	r22, r12
 a34:	80 e2       	ldi	r24, 0x20	; 32
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	0e 94 45 06 	call	0xc8a	; 0xc8a <fputc>
 a3c:	2a 94       	dec	r2
 a3e:	f4 cf       	rjmp	.-24     	; 0xa28 <vfprintf+0x18c>
 a40:	f5 01       	movw	r30, r10
 a42:	37 fc       	sbrc	r3, 7
 a44:	85 91       	lpm	r24, Z+
 a46:	37 fe       	sbrs	r3, 7
 a48:	81 91       	ld	r24, Z+
 a4a:	5f 01       	movw	r10, r30
 a4c:	b6 01       	movw	r22, r12
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	0e 94 45 06 	call	0xc8a	; 0xc8a <fputc>
 a54:	21 10       	cpse	r2, r1
 a56:	2a 94       	dec	r2
 a58:	21 e0       	ldi	r18, 0x01	; 1
 a5a:	82 1a       	sub	r8, r18
 a5c:	91 08       	sbc	r9, r1
 a5e:	81 14       	cp	r8, r1
 a60:	91 04       	cpc	r9, r1
 a62:	71 f7       	brne	.-36     	; 0xa40 <vfprintf+0x1a4>
 a64:	e8 c0       	rjmp	.+464    	; 0xc36 <vfprintf+0x39a>
 a66:	84 36       	cpi	r24, 0x64	; 100
 a68:	11 f0       	breq	.+4      	; 0xa6e <vfprintf+0x1d2>
 a6a:	89 36       	cpi	r24, 0x69	; 105
 a6c:	41 f5       	brne	.+80     	; 0xabe <vfprintf+0x222>
 a6e:	f8 01       	movw	r30, r16
 a70:	37 fe       	sbrs	r3, 7
 a72:	07 c0       	rjmp	.+14     	; 0xa82 <vfprintf+0x1e6>
 a74:	60 81       	ld	r22, Z
 a76:	71 81       	ldd	r23, Z+1	; 0x01
 a78:	82 81       	ldd	r24, Z+2	; 0x02
 a7a:	93 81       	ldd	r25, Z+3	; 0x03
 a7c:	0c 5f       	subi	r16, 0xFC	; 252
 a7e:	1f 4f       	sbci	r17, 0xFF	; 255
 a80:	08 c0       	rjmp	.+16     	; 0xa92 <vfprintf+0x1f6>
 a82:	60 81       	ld	r22, Z
 a84:	71 81       	ldd	r23, Z+1	; 0x01
 a86:	07 2e       	mov	r0, r23
 a88:	00 0c       	add	r0, r0
 a8a:	88 0b       	sbc	r24, r24
 a8c:	99 0b       	sbc	r25, r25
 a8e:	0e 5f       	subi	r16, 0xFE	; 254
 a90:	1f 4f       	sbci	r17, 0xFF	; 255
 a92:	f3 2d       	mov	r31, r3
 a94:	ff 76       	andi	r31, 0x6F	; 111
 a96:	3f 2e       	mov	r3, r31
 a98:	97 ff       	sbrs	r25, 7
 a9a:	09 c0       	rjmp	.+18     	; 0xaae <vfprintf+0x212>
 a9c:	90 95       	com	r25
 a9e:	80 95       	com	r24
 aa0:	70 95       	com	r23
 aa2:	61 95       	neg	r22
 aa4:	7f 4f       	sbci	r23, 0xFF	; 255
 aa6:	8f 4f       	sbci	r24, 0xFF	; 255
 aa8:	9f 4f       	sbci	r25, 0xFF	; 255
 aaa:	f0 68       	ori	r31, 0x80	; 128
 aac:	3f 2e       	mov	r3, r31
 aae:	2a e0       	ldi	r18, 0x0A	; 10
 ab0:	30 e0       	ldi	r19, 0x00	; 0
 ab2:	a3 01       	movw	r20, r6
 ab4:	0e 94 81 06 	call	0xd02	; 0xd02 <__ultoa_invert>
 ab8:	88 2e       	mov	r8, r24
 aba:	86 18       	sub	r8, r6
 abc:	45 c0       	rjmp	.+138    	; 0xb48 <vfprintf+0x2ac>
 abe:	85 37       	cpi	r24, 0x75	; 117
 ac0:	31 f4       	brne	.+12     	; 0xace <vfprintf+0x232>
 ac2:	23 2d       	mov	r18, r3
 ac4:	2f 7e       	andi	r18, 0xEF	; 239
 ac6:	b2 2e       	mov	r11, r18
 ac8:	2a e0       	ldi	r18, 0x0A	; 10
 aca:	30 e0       	ldi	r19, 0x00	; 0
 acc:	25 c0       	rjmp	.+74     	; 0xb18 <vfprintf+0x27c>
 ace:	93 2d       	mov	r25, r3
 ad0:	99 7f       	andi	r25, 0xF9	; 249
 ad2:	b9 2e       	mov	r11, r25
 ad4:	8f 36       	cpi	r24, 0x6F	; 111
 ad6:	c1 f0       	breq	.+48     	; 0xb08 <vfprintf+0x26c>
 ad8:	18 f4       	brcc	.+6      	; 0xae0 <vfprintf+0x244>
 ada:	88 35       	cpi	r24, 0x58	; 88
 adc:	79 f0       	breq	.+30     	; 0xafc <vfprintf+0x260>
 ade:	b5 c0       	rjmp	.+362    	; 0xc4a <vfprintf+0x3ae>
 ae0:	80 37       	cpi	r24, 0x70	; 112
 ae2:	19 f0       	breq	.+6      	; 0xaea <vfprintf+0x24e>
 ae4:	88 37       	cpi	r24, 0x78	; 120
 ae6:	21 f0       	breq	.+8      	; 0xaf0 <vfprintf+0x254>
 ae8:	b0 c0       	rjmp	.+352    	; 0xc4a <vfprintf+0x3ae>
 aea:	e9 2f       	mov	r30, r25
 aec:	e0 61       	ori	r30, 0x10	; 16
 aee:	be 2e       	mov	r11, r30
 af0:	b4 fe       	sbrs	r11, 4
 af2:	0d c0       	rjmp	.+26     	; 0xb0e <vfprintf+0x272>
 af4:	fb 2d       	mov	r31, r11
 af6:	f4 60       	ori	r31, 0x04	; 4
 af8:	bf 2e       	mov	r11, r31
 afa:	09 c0       	rjmp	.+18     	; 0xb0e <vfprintf+0x272>
 afc:	34 fe       	sbrs	r3, 4
 afe:	0a c0       	rjmp	.+20     	; 0xb14 <vfprintf+0x278>
 b00:	29 2f       	mov	r18, r25
 b02:	26 60       	ori	r18, 0x06	; 6
 b04:	b2 2e       	mov	r11, r18
 b06:	06 c0       	rjmp	.+12     	; 0xb14 <vfprintf+0x278>
 b08:	28 e0       	ldi	r18, 0x08	; 8
 b0a:	30 e0       	ldi	r19, 0x00	; 0
 b0c:	05 c0       	rjmp	.+10     	; 0xb18 <vfprintf+0x27c>
 b0e:	20 e1       	ldi	r18, 0x10	; 16
 b10:	30 e0       	ldi	r19, 0x00	; 0
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <vfprintf+0x27c>
 b14:	20 e1       	ldi	r18, 0x10	; 16
 b16:	32 e0       	ldi	r19, 0x02	; 2
 b18:	f8 01       	movw	r30, r16
 b1a:	b7 fe       	sbrs	r11, 7
 b1c:	07 c0       	rjmp	.+14     	; 0xb2c <vfprintf+0x290>
 b1e:	60 81       	ld	r22, Z
 b20:	71 81       	ldd	r23, Z+1	; 0x01
 b22:	82 81       	ldd	r24, Z+2	; 0x02
 b24:	93 81       	ldd	r25, Z+3	; 0x03
 b26:	0c 5f       	subi	r16, 0xFC	; 252
 b28:	1f 4f       	sbci	r17, 0xFF	; 255
 b2a:	06 c0       	rjmp	.+12     	; 0xb38 <vfprintf+0x29c>
 b2c:	60 81       	ld	r22, Z
 b2e:	71 81       	ldd	r23, Z+1	; 0x01
 b30:	80 e0       	ldi	r24, 0x00	; 0
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	0e 5f       	subi	r16, 0xFE	; 254
 b36:	1f 4f       	sbci	r17, 0xFF	; 255
 b38:	a3 01       	movw	r20, r6
 b3a:	0e 94 81 06 	call	0xd02	; 0xd02 <__ultoa_invert>
 b3e:	88 2e       	mov	r8, r24
 b40:	86 18       	sub	r8, r6
 b42:	fb 2d       	mov	r31, r11
 b44:	ff 77       	andi	r31, 0x7F	; 127
 b46:	3f 2e       	mov	r3, r31
 b48:	36 fe       	sbrs	r3, 6
 b4a:	0d c0       	rjmp	.+26     	; 0xb66 <vfprintf+0x2ca>
 b4c:	23 2d       	mov	r18, r3
 b4e:	2e 7f       	andi	r18, 0xFE	; 254
 b50:	a2 2e       	mov	r10, r18
 b52:	89 14       	cp	r8, r9
 b54:	58 f4       	brcc	.+22     	; 0xb6c <vfprintf+0x2d0>
 b56:	34 fe       	sbrs	r3, 4
 b58:	0b c0       	rjmp	.+22     	; 0xb70 <vfprintf+0x2d4>
 b5a:	32 fc       	sbrc	r3, 2
 b5c:	09 c0       	rjmp	.+18     	; 0xb70 <vfprintf+0x2d4>
 b5e:	83 2d       	mov	r24, r3
 b60:	8e 7e       	andi	r24, 0xEE	; 238
 b62:	a8 2e       	mov	r10, r24
 b64:	05 c0       	rjmp	.+10     	; 0xb70 <vfprintf+0x2d4>
 b66:	b8 2c       	mov	r11, r8
 b68:	a3 2c       	mov	r10, r3
 b6a:	03 c0       	rjmp	.+6      	; 0xb72 <vfprintf+0x2d6>
 b6c:	b8 2c       	mov	r11, r8
 b6e:	01 c0       	rjmp	.+2      	; 0xb72 <vfprintf+0x2d6>
 b70:	b9 2c       	mov	r11, r9
 b72:	a4 fe       	sbrs	r10, 4
 b74:	0f c0       	rjmp	.+30     	; 0xb94 <vfprintf+0x2f8>
 b76:	fe 01       	movw	r30, r28
 b78:	e8 0d       	add	r30, r8
 b7a:	f1 1d       	adc	r31, r1
 b7c:	80 81       	ld	r24, Z
 b7e:	80 33       	cpi	r24, 0x30	; 48
 b80:	21 f4       	brne	.+8      	; 0xb8a <vfprintf+0x2ee>
 b82:	9a 2d       	mov	r25, r10
 b84:	99 7e       	andi	r25, 0xE9	; 233
 b86:	a9 2e       	mov	r10, r25
 b88:	09 c0       	rjmp	.+18     	; 0xb9c <vfprintf+0x300>
 b8a:	a2 fe       	sbrs	r10, 2
 b8c:	06 c0       	rjmp	.+12     	; 0xb9a <vfprintf+0x2fe>
 b8e:	b3 94       	inc	r11
 b90:	b3 94       	inc	r11
 b92:	04 c0       	rjmp	.+8      	; 0xb9c <vfprintf+0x300>
 b94:	8a 2d       	mov	r24, r10
 b96:	86 78       	andi	r24, 0x86	; 134
 b98:	09 f0       	breq	.+2      	; 0xb9c <vfprintf+0x300>
 b9a:	b3 94       	inc	r11
 b9c:	a3 fc       	sbrc	r10, 3
 b9e:	11 c0       	rjmp	.+34     	; 0xbc2 <vfprintf+0x326>
 ba0:	a0 fe       	sbrs	r10, 0
 ba2:	06 c0       	rjmp	.+12     	; 0xbb0 <vfprintf+0x314>
 ba4:	b2 14       	cp	r11, r2
 ba6:	88 f4       	brcc	.+34     	; 0xbca <vfprintf+0x32e>
 ba8:	28 0c       	add	r2, r8
 baa:	92 2c       	mov	r9, r2
 bac:	9b 18       	sub	r9, r11
 bae:	0e c0       	rjmp	.+28     	; 0xbcc <vfprintf+0x330>
 bb0:	b2 14       	cp	r11, r2
 bb2:	60 f4       	brcc	.+24     	; 0xbcc <vfprintf+0x330>
 bb4:	b6 01       	movw	r22, r12
 bb6:	80 e2       	ldi	r24, 0x20	; 32
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	0e 94 45 06 	call	0xc8a	; 0xc8a <fputc>
 bbe:	b3 94       	inc	r11
 bc0:	f7 cf       	rjmp	.-18     	; 0xbb0 <vfprintf+0x314>
 bc2:	b2 14       	cp	r11, r2
 bc4:	18 f4       	brcc	.+6      	; 0xbcc <vfprintf+0x330>
 bc6:	2b 18       	sub	r2, r11
 bc8:	02 c0       	rjmp	.+4      	; 0xbce <vfprintf+0x332>
 bca:	98 2c       	mov	r9, r8
 bcc:	21 2c       	mov	r2, r1
 bce:	a4 fe       	sbrs	r10, 4
 bd0:	10 c0       	rjmp	.+32     	; 0xbf2 <vfprintf+0x356>
 bd2:	b6 01       	movw	r22, r12
 bd4:	80 e3       	ldi	r24, 0x30	; 48
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	0e 94 45 06 	call	0xc8a	; 0xc8a <fputc>
 bdc:	a2 fe       	sbrs	r10, 2
 bde:	17 c0       	rjmp	.+46     	; 0xc0e <vfprintf+0x372>
 be0:	a1 fc       	sbrc	r10, 1
 be2:	03 c0       	rjmp	.+6      	; 0xbea <vfprintf+0x34e>
 be4:	88 e7       	ldi	r24, 0x78	; 120
 be6:	90 e0       	ldi	r25, 0x00	; 0
 be8:	02 c0       	rjmp	.+4      	; 0xbee <vfprintf+0x352>
 bea:	88 e5       	ldi	r24, 0x58	; 88
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	b6 01       	movw	r22, r12
 bf0:	0c c0       	rjmp	.+24     	; 0xc0a <vfprintf+0x36e>
 bf2:	8a 2d       	mov	r24, r10
 bf4:	86 78       	andi	r24, 0x86	; 134
 bf6:	59 f0       	breq	.+22     	; 0xc0e <vfprintf+0x372>
 bf8:	a1 fe       	sbrs	r10, 1
 bfa:	02 c0       	rjmp	.+4      	; 0xc00 <vfprintf+0x364>
 bfc:	8b e2       	ldi	r24, 0x2B	; 43
 bfe:	01 c0       	rjmp	.+2      	; 0xc02 <vfprintf+0x366>
 c00:	80 e2       	ldi	r24, 0x20	; 32
 c02:	a7 fc       	sbrc	r10, 7
 c04:	8d e2       	ldi	r24, 0x2D	; 45
 c06:	b6 01       	movw	r22, r12
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	0e 94 45 06 	call	0xc8a	; 0xc8a <fputc>
 c0e:	89 14       	cp	r8, r9
 c10:	38 f4       	brcc	.+14     	; 0xc20 <vfprintf+0x384>
 c12:	b6 01       	movw	r22, r12
 c14:	80 e3       	ldi	r24, 0x30	; 48
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	0e 94 45 06 	call	0xc8a	; 0xc8a <fputc>
 c1c:	9a 94       	dec	r9
 c1e:	f7 cf       	rjmp	.-18     	; 0xc0e <vfprintf+0x372>
 c20:	8a 94       	dec	r8
 c22:	f3 01       	movw	r30, r6
 c24:	e8 0d       	add	r30, r8
 c26:	f1 1d       	adc	r31, r1
 c28:	80 81       	ld	r24, Z
 c2a:	b6 01       	movw	r22, r12
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	0e 94 45 06 	call	0xc8a	; 0xc8a <fputc>
 c32:	81 10       	cpse	r8, r1
 c34:	f5 cf       	rjmp	.-22     	; 0xc20 <vfprintf+0x384>
 c36:	22 20       	and	r2, r2
 c38:	09 f4       	brne	.+2      	; 0xc3c <vfprintf+0x3a0>
 c3a:	42 ce       	rjmp	.-892    	; 0x8c0 <vfprintf+0x24>
 c3c:	b6 01       	movw	r22, r12
 c3e:	80 e2       	ldi	r24, 0x20	; 32
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	0e 94 45 06 	call	0xc8a	; 0xc8a <fputc>
 c46:	2a 94       	dec	r2
 c48:	f6 cf       	rjmp	.-20     	; 0xc36 <vfprintf+0x39a>
 c4a:	f6 01       	movw	r30, r12
 c4c:	86 81       	ldd	r24, Z+6	; 0x06
 c4e:	97 81       	ldd	r25, Z+7	; 0x07
 c50:	02 c0       	rjmp	.+4      	; 0xc56 <vfprintf+0x3ba>
 c52:	8f ef       	ldi	r24, 0xFF	; 255
 c54:	9f ef       	ldi	r25, 0xFF	; 255
 c56:	2b 96       	adiw	r28, 0x0b	; 11
 c58:	e2 e1       	ldi	r30, 0x12	; 18
 c5a:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__epilogue_restores__>

00000c5e <strnlen_P>:
 c5e:	fc 01       	movw	r30, r24
 c60:	05 90       	lpm	r0, Z+
 c62:	61 50       	subi	r22, 0x01	; 1
 c64:	70 40       	sbci	r23, 0x00	; 0
 c66:	01 10       	cpse	r0, r1
 c68:	d8 f7       	brcc	.-10     	; 0xc60 <strnlen_P+0x2>
 c6a:	80 95       	com	r24
 c6c:	90 95       	com	r25
 c6e:	8e 0f       	add	r24, r30
 c70:	9f 1f       	adc	r25, r31
 c72:	08 95       	ret

00000c74 <strnlen>:
 c74:	fc 01       	movw	r30, r24
 c76:	61 50       	subi	r22, 0x01	; 1
 c78:	70 40       	sbci	r23, 0x00	; 0
 c7a:	01 90       	ld	r0, Z+
 c7c:	01 10       	cpse	r0, r1
 c7e:	d8 f7       	brcc	.-10     	; 0xc76 <strnlen+0x2>
 c80:	80 95       	com	r24
 c82:	90 95       	com	r25
 c84:	8e 0f       	add	r24, r30
 c86:	9f 1f       	adc	r25, r31
 c88:	08 95       	ret

00000c8a <fputc>:
 c8a:	0f 93       	push	r16
 c8c:	1f 93       	push	r17
 c8e:	cf 93       	push	r28
 c90:	df 93       	push	r29
 c92:	fb 01       	movw	r30, r22
 c94:	23 81       	ldd	r18, Z+3	; 0x03
 c96:	21 fd       	sbrc	r18, 1
 c98:	03 c0       	rjmp	.+6      	; 0xca0 <fputc+0x16>
 c9a:	8f ef       	ldi	r24, 0xFF	; 255
 c9c:	9f ef       	ldi	r25, 0xFF	; 255
 c9e:	2c c0       	rjmp	.+88     	; 0xcf8 <fputc+0x6e>
 ca0:	22 ff       	sbrs	r18, 2
 ca2:	16 c0       	rjmp	.+44     	; 0xcd0 <fputc+0x46>
 ca4:	46 81       	ldd	r20, Z+6	; 0x06
 ca6:	57 81       	ldd	r21, Z+7	; 0x07
 ca8:	24 81       	ldd	r18, Z+4	; 0x04
 caa:	35 81       	ldd	r19, Z+5	; 0x05
 cac:	42 17       	cp	r20, r18
 cae:	53 07       	cpc	r21, r19
 cb0:	44 f4       	brge	.+16     	; 0xcc2 <fputc+0x38>
 cb2:	a0 81       	ld	r26, Z
 cb4:	b1 81       	ldd	r27, Z+1	; 0x01
 cb6:	9d 01       	movw	r18, r26
 cb8:	2f 5f       	subi	r18, 0xFF	; 255
 cba:	3f 4f       	sbci	r19, 0xFF	; 255
 cbc:	31 83       	std	Z+1, r19	; 0x01
 cbe:	20 83       	st	Z, r18
 cc0:	8c 93       	st	X, r24
 cc2:	26 81       	ldd	r18, Z+6	; 0x06
 cc4:	37 81       	ldd	r19, Z+7	; 0x07
 cc6:	2f 5f       	subi	r18, 0xFF	; 255
 cc8:	3f 4f       	sbci	r19, 0xFF	; 255
 cca:	37 83       	std	Z+7, r19	; 0x07
 ccc:	26 83       	std	Z+6, r18	; 0x06
 cce:	14 c0       	rjmp	.+40     	; 0xcf8 <fputc+0x6e>
 cd0:	8b 01       	movw	r16, r22
 cd2:	ec 01       	movw	r28, r24
 cd4:	fb 01       	movw	r30, r22
 cd6:	00 84       	ldd	r0, Z+8	; 0x08
 cd8:	f1 85       	ldd	r31, Z+9	; 0x09
 cda:	e0 2d       	mov	r30, r0
 cdc:	09 95       	icall
 cde:	89 2b       	or	r24, r25
 ce0:	e1 f6       	brne	.-72     	; 0xc9a <fputc+0x10>
 ce2:	d8 01       	movw	r26, r16
 ce4:	16 96       	adiw	r26, 0x06	; 6
 ce6:	8d 91       	ld	r24, X+
 ce8:	9c 91       	ld	r25, X
 cea:	17 97       	sbiw	r26, 0x07	; 7
 cec:	01 96       	adiw	r24, 0x01	; 1
 cee:	17 96       	adiw	r26, 0x07	; 7
 cf0:	9c 93       	st	X, r25
 cf2:	8e 93       	st	-X, r24
 cf4:	16 97       	sbiw	r26, 0x06	; 6
 cf6:	ce 01       	movw	r24, r28
 cf8:	df 91       	pop	r29
 cfa:	cf 91       	pop	r28
 cfc:	1f 91       	pop	r17
 cfe:	0f 91       	pop	r16
 d00:	08 95       	ret

00000d02 <__ultoa_invert>:
 d02:	fa 01       	movw	r30, r20
 d04:	aa 27       	eor	r26, r26
 d06:	28 30       	cpi	r18, 0x08	; 8
 d08:	51 f1       	breq	.+84     	; 0xd5e <__ultoa_invert+0x5c>
 d0a:	20 31       	cpi	r18, 0x10	; 16
 d0c:	81 f1       	breq	.+96     	; 0xd6e <__ultoa_invert+0x6c>
 d0e:	e8 94       	clt
 d10:	6f 93       	push	r22
 d12:	6e 7f       	andi	r22, 0xFE	; 254
 d14:	6e 5f       	subi	r22, 0xFE	; 254
 d16:	7f 4f       	sbci	r23, 0xFF	; 255
 d18:	8f 4f       	sbci	r24, 0xFF	; 255
 d1a:	9f 4f       	sbci	r25, 0xFF	; 255
 d1c:	af 4f       	sbci	r26, 0xFF	; 255
 d1e:	b1 e0       	ldi	r27, 0x01	; 1
 d20:	3e d0       	rcall	.+124    	; 0xd9e <__ultoa_invert+0x9c>
 d22:	b4 e0       	ldi	r27, 0x04	; 4
 d24:	3c d0       	rcall	.+120    	; 0xd9e <__ultoa_invert+0x9c>
 d26:	67 0f       	add	r22, r23
 d28:	78 1f       	adc	r23, r24
 d2a:	89 1f       	adc	r24, r25
 d2c:	9a 1f       	adc	r25, r26
 d2e:	a1 1d       	adc	r26, r1
 d30:	68 0f       	add	r22, r24
 d32:	79 1f       	adc	r23, r25
 d34:	8a 1f       	adc	r24, r26
 d36:	91 1d       	adc	r25, r1
 d38:	a1 1d       	adc	r26, r1
 d3a:	6a 0f       	add	r22, r26
 d3c:	71 1d       	adc	r23, r1
 d3e:	81 1d       	adc	r24, r1
 d40:	91 1d       	adc	r25, r1
 d42:	a1 1d       	adc	r26, r1
 d44:	20 d0       	rcall	.+64     	; 0xd86 <__ultoa_invert+0x84>
 d46:	09 f4       	brne	.+2      	; 0xd4a <__ultoa_invert+0x48>
 d48:	68 94       	set
 d4a:	3f 91       	pop	r19
 d4c:	2a e0       	ldi	r18, 0x0A	; 10
 d4e:	26 9f       	mul	r18, r22
 d50:	11 24       	eor	r1, r1
 d52:	30 19       	sub	r19, r0
 d54:	30 5d       	subi	r19, 0xD0	; 208
 d56:	31 93       	st	Z+, r19
 d58:	de f6       	brtc	.-74     	; 0xd10 <__ultoa_invert+0xe>
 d5a:	cf 01       	movw	r24, r30
 d5c:	08 95       	ret
 d5e:	46 2f       	mov	r20, r22
 d60:	47 70       	andi	r20, 0x07	; 7
 d62:	40 5d       	subi	r20, 0xD0	; 208
 d64:	41 93       	st	Z+, r20
 d66:	b3 e0       	ldi	r27, 0x03	; 3
 d68:	0f d0       	rcall	.+30     	; 0xd88 <__ultoa_invert+0x86>
 d6a:	c9 f7       	brne	.-14     	; 0xd5e <__ultoa_invert+0x5c>
 d6c:	f6 cf       	rjmp	.-20     	; 0xd5a <__ultoa_invert+0x58>
 d6e:	46 2f       	mov	r20, r22
 d70:	4f 70       	andi	r20, 0x0F	; 15
 d72:	40 5d       	subi	r20, 0xD0	; 208
 d74:	4a 33       	cpi	r20, 0x3A	; 58
 d76:	18 f0       	brcs	.+6      	; 0xd7e <__ultoa_invert+0x7c>
 d78:	49 5d       	subi	r20, 0xD9	; 217
 d7a:	31 fd       	sbrc	r19, 1
 d7c:	40 52       	subi	r20, 0x20	; 32
 d7e:	41 93       	st	Z+, r20
 d80:	02 d0       	rcall	.+4      	; 0xd86 <__ultoa_invert+0x84>
 d82:	a9 f7       	brne	.-22     	; 0xd6e <__ultoa_invert+0x6c>
 d84:	ea cf       	rjmp	.-44     	; 0xd5a <__ultoa_invert+0x58>
 d86:	b4 e0       	ldi	r27, 0x04	; 4
 d88:	a6 95       	lsr	r26
 d8a:	97 95       	ror	r25
 d8c:	87 95       	ror	r24
 d8e:	77 95       	ror	r23
 d90:	67 95       	ror	r22
 d92:	ba 95       	dec	r27
 d94:	c9 f7       	brne	.-14     	; 0xd88 <__ultoa_invert+0x86>
 d96:	00 97       	sbiw	r24, 0x00	; 0
 d98:	61 05       	cpc	r22, r1
 d9a:	71 05       	cpc	r23, r1
 d9c:	08 95       	ret
 d9e:	9b 01       	movw	r18, r22
 da0:	ac 01       	movw	r20, r24
 da2:	0a 2e       	mov	r0, r26
 da4:	06 94       	lsr	r0
 da6:	57 95       	ror	r21
 da8:	47 95       	ror	r20
 daa:	37 95       	ror	r19
 dac:	27 95       	ror	r18
 dae:	ba 95       	dec	r27
 db0:	c9 f7       	brne	.-14     	; 0xda4 <__ultoa_invert+0xa2>
 db2:	62 0f       	add	r22, r18
 db4:	73 1f       	adc	r23, r19
 db6:	84 1f       	adc	r24, r20
 db8:	95 1f       	adc	r25, r21
 dba:	a0 1d       	adc	r26, r0
 dbc:	08 95       	ret

00000dbe <__prologue_saves__>:
 dbe:	2f 92       	push	r2
 dc0:	3f 92       	push	r3
 dc2:	4f 92       	push	r4
 dc4:	5f 92       	push	r5
 dc6:	6f 92       	push	r6
 dc8:	7f 92       	push	r7
 dca:	8f 92       	push	r8
 dcc:	9f 92       	push	r9
 dce:	af 92       	push	r10
 dd0:	bf 92       	push	r11
 dd2:	cf 92       	push	r12
 dd4:	df 92       	push	r13
 dd6:	ef 92       	push	r14
 dd8:	ff 92       	push	r15
 dda:	0f 93       	push	r16
 ddc:	1f 93       	push	r17
 dde:	cf 93       	push	r28
 de0:	df 93       	push	r29
 de2:	cd b7       	in	r28, 0x3d	; 61
 de4:	de b7       	in	r29, 0x3e	; 62
 de6:	ca 1b       	sub	r28, r26
 de8:	db 0b       	sbc	r29, r27
 dea:	0f b6       	in	r0, 0x3f	; 63
 dec:	f8 94       	cli
 dee:	de bf       	out	0x3e, r29	; 62
 df0:	0f be       	out	0x3f, r0	; 63
 df2:	cd bf       	out	0x3d, r28	; 61
 df4:	09 94       	ijmp

00000df6 <__epilogue_restores__>:
 df6:	2a 88       	ldd	r2, Y+18	; 0x12
 df8:	39 88       	ldd	r3, Y+17	; 0x11
 dfa:	48 88       	ldd	r4, Y+16	; 0x10
 dfc:	5f 84       	ldd	r5, Y+15	; 0x0f
 dfe:	6e 84       	ldd	r6, Y+14	; 0x0e
 e00:	7d 84       	ldd	r7, Y+13	; 0x0d
 e02:	8c 84       	ldd	r8, Y+12	; 0x0c
 e04:	9b 84       	ldd	r9, Y+11	; 0x0b
 e06:	aa 84       	ldd	r10, Y+10	; 0x0a
 e08:	b9 84       	ldd	r11, Y+9	; 0x09
 e0a:	c8 84       	ldd	r12, Y+8	; 0x08
 e0c:	df 80       	ldd	r13, Y+7	; 0x07
 e0e:	ee 80       	ldd	r14, Y+6	; 0x06
 e10:	fd 80       	ldd	r15, Y+5	; 0x05
 e12:	0c 81       	ldd	r16, Y+4	; 0x04
 e14:	1b 81       	ldd	r17, Y+3	; 0x03
 e16:	aa 81       	ldd	r26, Y+2	; 0x02
 e18:	b9 81       	ldd	r27, Y+1	; 0x01
 e1a:	ce 0f       	add	r28, r30
 e1c:	d1 1d       	adc	r29, r1
 e1e:	0f b6       	in	r0, 0x3f	; 63
 e20:	f8 94       	cli
 e22:	de bf       	out	0x3e, r29	; 62
 e24:	0f be       	out	0x3f, r0	; 63
 e26:	cd bf       	out	0x3d, r28	; 61
 e28:	ed 01       	movw	r28, r26
 e2a:	08 95       	ret

00000e2c <_exit>:
 e2c:	f8 94       	cli

00000e2e <__stop_program>:
 e2e:	ff cf       	rjmp	.-2      	; 0xe2e <__stop_program>
